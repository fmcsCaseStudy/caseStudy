<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>clock gameTimer;    // Just for debug

/*----------------------------------------------------------------------------------------------------*/
// Constants and declarations related to the map of the game
typedef struct {
    int x;
    int y;
} Coordinate;

const Coordinate SPAWN_POS = { 0, 0 };
const Coordinate MAIN_TOWER_POS = { 15, 4 };

// Possible paths are 0-1-3 / 0-1-4 / 0-2
const int PATH_LEN = 25;
const int NUM_SEGMENTS = 5;
const int MAX_SEGMENTS_LEN = 14;
const int SEGMENTS_LEN[NUM_SEGMENTS] = { 12, 6, 14, 8, 8 };
const Coordinate SEGMENTS[NUM_SEGMENTS][MAX_SEGMENTS_LEN] = {
    { {  0, 0 }, {  0, 1 }, {  0, 2 }, {  0, 3 }, {  0, 4 }, {  1, 4 }, {  2,  4 }, {  3,  4 }, {  4,  4 }, {  5,  4 }, {  6,  4 }, {  7,  4 }, { -1, -1 }, { -1, -1 } },
    { {  7, 5 }, {  7, 6 }, {  7, 7 }, {  8, 7 }, {  9, 7 }, { 10, 7 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 } },
    { {  7, 3 }, {  7, 2 }, {  7, 1 }, {  8, 1 }, {  9, 1 }, { 10, 1 }, { 11,  1 }, { 12,  1 }, { 13,  1 }, { 14,  1 }, { 15,  1 }, { 15,  2 }, { 15,  3 }, { 15,  4 } },
    { { 11, 7 }, { 12, 7 }, { 13, 7 }, { 14, 7 }, { 15, 7 }, { 15, 6 }, { 15,  5 }, { 15,  4 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 } },
    { { 10, 6 }, { 10, 5 }, { 10, 4 }, { 11, 4 }, { 12, 4 }, { 13, 4 }, { 14,  4 }, { 15,  4 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 } }
};

const int MAX_TURRETS = 7; 


/*----------------------------------------------------------------------------------------------------*/
// Constants and declarations related to Enemy
typedef int[0,1] EnemyType;    // 0 -&gt; Circle, 1 -&gt; Square
const EnemyType CIRCLE = 0;
const EnemyType SQUARE = 1;

typedef struct {
    bool active;
    Coordinate pos;
    EnemyType type;
    int speed;
    int health;
    int damage;
    int spawnTime;              // Time when enemy spawned (for targeting priority)
} Enemy;

const int CIRCLE_SPEED      =  1;
const int CIRCLE_HEALTH     = 10;
const int CIRCLE_DAMAGE     =  2;
const int CIRCLE_SPAWN_TIME =  2;

const int SQUARE_SPEED      =  3;
const int SQUARE_HEALTH     = 20;
const int SQUARE_DAMAGE     =  4;
const int SQUARE_SPAWN_TIME =  3;


/*----------------------------------------------------------------------------------------------------*/
// Constants and declarations related to Turret
typedef int[-1,2] TurretType;    // -1 -&gt; NONE, 0 -&gt; Basic, 1 -&gt; Cannon, 2 -&gt; Sniper
const TurretType NONE   = -1;    // Used to fill the gaps
const TurretType BASIC  =  0;
const TurretType CANNON =  1;
const TurretType SNIPER =  2;

typedef struct {
    Coordinate pos;
    bool ready;
    int range;
    int fireSpeed;
    int damage;
} Turret;

const int BASIC_RANGE       =  2;
const int BASIC_FIRE_SPEED  =  2;
const int BASIC_DAMAGE      =  2;

const int CANNON_RANGE      =  1;
const int CANNON_FIRE_SPEED =  7;
const int CANNON_DAMAGE     =  5;

const int SNIPER_RANGE      =  4;
const int SNIPER_FIRE_SPEED = 20;
const int SNIPER_DAMAGE     =  8;


/*----------------------------------------------------------------------------------------------------*/
// Game configuration (VANILLA VERSION)
const int NUM_CIRCLES = 300;
const int NUM_SQUARES = 400;
const int NUM_ENEMIES = NUM_CIRCLES + NUM_SQUARES;

typedef struct {
    int[0, MAX_TURRETS] numTurrets;
    TurretType turretsType[MAX_TURRETS];
    Coordinate turretsPos[MAX_TURRETS];
} TurretsConfiguration;

const int NUM_CONFIGURATIONS = 4;
const TurretsConfiguration TURRETS_CONFIGUTATIONS[NUM_CONFIGURATIONS] = {
    // No turrets (PROPERTIES I-V)
    {
        0,
        { NONE, NONE, NONE, NONE, NONE, NONE, NONE },
        { { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 } }
    },
    // Default (PROPERTY VI) - Winning
    {
        7,
        { SNIPER, BASIC, CANNON, CANNON, SNIPER, CANNON, CANNON },
        { { 2, 3 }, { 5, 5 }, { 8, 2 }, { 8, 6 }, { 11, 5 }, { 14, 2 }, { 14, 6 } }
    },
    // Custom 1 (PROPERTY VIII) - Winning
    {
        5,
        { BASIC, BASIC, SNIPER, CANNON, SNIPER, NONE, NONE },
        { { 5, 5 }, { 8, 6 }, { 2, 3 }, { 11, 5 }, { 14, 2 }, { -1, -1 }, { -1, -1 } }
    },
    // Custom 2 (PROPERTY VIII) - Losing
    {
        4,
        { CANNON, CANNON, CANNON, CANNON, NONE, NONE, NONE },
        { { 14, 2 }, { 14, 6 }, { 11, 5 }, { 8, 2 }, { -1, -1 }, { -1, -1 }, { -1, -1 } }
    }
};

/////////////////////////////////////////////////////////////////////////////////////////
//                                                                                     //
//      ||      ||||        |||| |||||||||||| |||||||||||    ||||||||||||      ||      //
//      ||      ||||        |||| |||||||||||| ||||     ||||  ||||||||||||      ||      //
//      ||      ||||        |||| ||||         ||||      |||| ||||              ||      //
//      ||      ||||        |||| ||||         ||||      |||| ||||              ||      //
//      ||      |||||||||||||||| |||||||||||| ||||     ||||  ||||||||||||      ||      //
//      ||      |||||||||||||||| |||||||||||| |||||||||||    ||||||||||||      ||      //
//  \\  ||  //  ||||        |||| ||||         ||||   ||||    ||||          \\  ||  //  //
//   \\ || //   ||||        |||| ||||         ||||    ||||   ||||           \\ || //   //
//    \\||//    ||||        |||| |||||||||||| ||||     ||||  ||||||||||||    \\||//    //
//     \\//     ||||        |||| |||||||||||| ||||      |||| ||||||||||||     \\//     //
//                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////

const int[0, NUM_CONFIGURATIONS - 1] SELECTED_CONFIGURATION = 1;

/////////////////////////////////////////////////////////////////////////////////////////
//                                                                                     //
//     //\\     ||||        |||| |||||||||||| |||||||||||    ||||||||||||     //\\     //
//    //||\\    ||||        |||| |||||||||||| ||||     ||||  ||||||||||||    //||\\    //
//   // || \\   ||||        |||| ||||         ||||      |||| ||||           // || \\   //
//  //  ||  \\  ||||        |||| ||||         ||||      |||| ||||          //  ||  \\  //
//      ||      |||||||||||||||| |||||||||||| ||||     ||||  ||||||||||||      ||      //
//      ||      |||||||||||||||| |||||||||||| |||||||||||    ||||||||||||      ||      //
//      ||      ||||        |||| ||||         ||||  ||||     ||||              ||      //
//      ||      ||||        |||| ||||         ||||    ||||   ||||              ||      //
//      ||      ||||        |||| |||||||||||| ||||     ||||  ||||||||||||      ||      //
//      ||      ||||        |||| |||||||||||| ||||      |||| ||||||||||||      ||      //
//                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////

const int NUM_TURRETS = TURRETS_CONFIGUTATIONS[SELECTED_CONFIGURATION].numTurrets;

int mainTowerLife = 100;
int activeEnemies = NUM_ENEMIES;


/*----------------------------------------------------------------------------------------------------*/
// Global state and channels
Enemy enemies[NUM_ENEMIES];
Turret turrets[MAX_TURRETS];
broadcast chan enemySpawning[NUM_ENEMIES];             // Channel to spawn enemy
broadcast chan turretPlacing[MAX_TURRETS];             // Channel to place turrets
urgent broadcast chan turretAwakening[MAX_TURRETS];    // Channel to awake turrets


/*----------------------------------------------------------------------------------------------------*/
// HELPER FUNCTIONS

// Function to calculate Chebyshev distance between two points
// @param pos1    The coordinate of the first entity
// @param pos2    The coordinate of the second entity
// @return        The maximum distance between the X-axis and the Y-axis
int distance(Coordinate pos1, Coordinate pos2) {
    int x = abs(pos1.x - pos2.x);
    int y = abs(pos1.y - pos2.y);
    
    return x &gt;? y;
}

// Function to check if the coordinate is the Main Tower's coordinate
// @param pos    The coordinate of the entity
// @return       True if the coordinate of the entity is the Main Tower's coordinate, otherwise False
bool isMainTower(Coordinate pos) {
    return distance(pos, MAIN_TOWER_POS) == 0;
}

// Function to check if the coordinate is on path or not
// @param pos    The coordinate of the enemy
// @return       True if the coordinate of the enemy is on path, otherwise False
bool isPath(Coordinate pos){
    // Vertical segments
    if(pos.x ==  0 &amp;&amp; 0&lt;=pos.y &amp;&amp; pos.y&lt;=4) return true;
    if(pos.x ==  7 &amp;&amp; 1&lt;=pos.y &amp;&amp; pos.y&lt;=7) return true;
    if(pos.x == 10 &amp;&amp; 4&lt;=pos.y &amp;&amp; pos.y&lt;=7) return true;
    if(pos.x == 15 &amp;&amp; 1&lt;=pos.y &amp;&amp; pos.y&lt;=7) return true;

    // Horizontal segments
    if(pos.y == 1 &amp;&amp;  7&lt;=pos.x &amp;&amp; pos.x&lt;=15) return true;
    if(pos.y == 4 &amp;&amp;  0&lt;=pos.x &amp;&amp; pos.x&lt;= 7) return true;
    if(pos.y == 4 &amp;&amp; 10&lt;=pos.x &amp;&amp; pos.x&lt;=15) return true;
    if(pos.y == 7 &amp;&amp;  7&lt;=pos.x &amp;&amp; pos.x&lt;=15) return true;

    return false;        
}

// Function used to find a target for the turret
// @param turretId    The ID of the turret that has to find a target
// @return            The ID of the targeted enemy if it exists, otherwise -1
int findTarget(int turretId) {
    int minDistance = turrets[turretId].range;    // Initialized with the highest acceptable value
    int maxSpawnTime = -1;                        // Initialized with the highest not possible value
    int targetId = -1;                            // The ID of the enemy targeted
    int i;

    for (i = 0; i &lt; NUM_ENEMIES; i++) {
        if (enemies[i].active) {
            int d = distance(turrets[turretId].pos, enemies[i].pos);
            
            if ( d &lt; minDistance || 
                (d == minDistance &amp;&amp; enemies[i].spawnTime &gt; maxSpawnTime) || 
                (d == minDistance &amp;&amp; enemies[i].spawnTime == maxSpawnTime &amp;&amp; enemies[i].type == SQUARE)
               ) {
                minDistance = d;
                maxSpawnTime = enemies[i].spawnTime;
                targetId = i;
            }
        }
    }
    
    return targetId;
}</declaration>
	<template>
		<name>Controller</name>
		<declaration>int turretsPlaced  = 0;      // Track the number of turrets that have been placed
int circlesSpawned = 0;      // Track the number of circles that have been spawned
int squaresSpawned = 0;      // Track the number of squares that have been spawned
int enemiesSpawned = 0;      // Track the number of enemies that have been spawned (circlesSpawned + squaresSpawned)

clock circleSpawnTimer;      // Track circle spawn time
clock squareSpawnTimer;      // Track square spawn time


// Place a turret and setup the related global variables
void placeTurret() {
    TurretType type = TURRETS_CONFIGUTATIONS[SELECTED_CONFIGURATION].turretsType[turretsPlaced];
    
    turrets[turretsPlaced].ready = true;
    turrets[turretsPlaced].pos = TURRETS_CONFIGUTATIONS[SELECTED_CONFIGURATION].turretsPos[turretsPlaced];
            
    if (type == BASIC) {
        turrets[turretsPlaced].range     = BASIC_RANGE;
        turrets[turretsPlaced].fireSpeed = BASIC_FIRE_SPEED;
        turrets[turretsPlaced].damage    = BASIC_DAMAGE;
    } else if (type == CANNON) {
        turrets[turretsPlaced].range     = CANNON_RANGE;
        turrets[turretsPlaced].fireSpeed = CANNON_FIRE_SPEED;
        turrets[turretsPlaced].damage    = CANNON_DAMAGE;
    } else if (type == SNIPER)  {
        turrets[turretsPlaced].range     = SNIPER_RANGE;
        turrets[turretsPlaced].fireSpeed = SNIPER_FIRE_SPEED;
        turrets[turretsPlaced].damage    = SNIPER_DAMAGE;
    }
    
    turretsPlaced++;
}

// Spawn an enemy and setup the related global variables
// @param type    The type of enemy to spawn
void spawnEnemy(EnemyType type) {
    enemies[enemiesSpawned].active = true;
    enemies[enemiesSpawned].type   = type;
    enemies[enemiesSpawned].pos    = SPAWN_POS;

    if(type == CIRCLE) {
        enemies[enemiesSpawned].speed     = CIRCLE_SPEED;
        enemies[enemiesSpawned].health    = CIRCLE_HEALTH;
        enemies[enemiesSpawned].damage    = CIRCLE_DAMAGE;
        enemies[enemiesSpawned].spawnTime = CIRCLE_SPAWN_TIME * circlesSpawned;

        circlesSpawned++;
        circleSpawnTimer = 0;
    }
    else if(type == SQUARE) {
        enemies[enemiesSpawned].speed     = SQUARE_SPEED;
        enemies[enemiesSpawned].health    = SQUARE_HEALTH;
        enemies[enemiesSpawned].damage    = SQUARE_DAMAGE;
        enemies[enemiesSpawned].spawnTime = SQUARE_SPAWN_TIME * squaresSpawned;
        
        squaresSpawned++;
        squareSpawnTimer = 0;
    }

    enemiesSpawned++;
}

</declaration>
		<location id="id0" x="680" y="-476">
			<name x="595" y="-493">Waiting</name>
			<label kind="comments" x="561" y="-884">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Waiting &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

Controller remains in wait
state until the end of game
is reached.</label>
		</location>
		<location id="id1" x="170" y="-476">
			<name x="51" y="-476">Spawn_Enemy</name>
			<label kind="invariant" x="213" y="-518">(circlesSpawned==NUM_CIRCLES || 
 circleSpawnTimer&lt;=CIRCLE_SPAWN_TIME) &amp;&amp;
(squaresSpawned==NUM_SQUARES || 
 squareSpawnTimer&lt;=SQUARE_SPAWN_TIME)</label>
			<label kind="comments" x="68" y="-884">&gt;&gt;&gt;&gt; Spawn_Enemy &lt;&lt;&lt;&lt;

State in which rest of
the remaining enemies
are spawned.</label>
		</location>
		<location id="id2" x="-748" y="-476">
			<name x="-799" y="-518">Place_Turret</name>
			<label kind="comments" x="-875" y="-884">&gt;&gt;&gt;&gt;&gt;&gt;&gt; Place_Turret &lt;&lt;&lt;&lt;&lt;&lt;&lt;

At each iteration:
- it setups all the variables
  related to a turret in the
  global array turrets[];
- it sends a signal to the
  related TurretProcess().</label>
			<committed/>
		</location>
		<location id="id3" x="170" y="-680">
			<name x="119" y="-722">Spawn_Circle</name>
			<committed/>
		</location>
		<location id="id4" x="170" y="-272">
			<name x="119" y="-255">Spawn_Square</name>
			<committed/>
		</location>
		<location id="id5" x="-374" y="-476">
			<name x="-357" y="-476">Initial_Enemies</name>
			<label kind="comments" x="-527" y="-884">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Initial_Enemies &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

It spawns the first two enemies
which must spawn at time 0.
The square is spawned first so 
it is targeted first
(To respect targeting priorities).</label>
			<committed/>
		</location>
		<location id="id6" x="986" y="-510">
			<name x="969" y="-552">Won</name>
			<label kind="comments" x="884" y="-884">&gt;&gt;&gt;&gt;&gt; Won + Lost &lt;&lt;&lt;&lt;&lt;

Final states reached at
the end of the game.
They indicate the
configuration's result.</label>
		</location>
		<location id="id7" x="986" y="-442">
			<name x="969" y="-425">Lost</name>
		</location>
		<init ref="id2"/>
		<transition id="id8">
			<source ref="id0"/>
			<target ref="id7"/>
			<label kind="guard" x="799" y="-433">mainTowerLife&lt;=0</label>
			<nail x="748" y="-442"/>
		</transition>
		<transition id="id9">
			<source ref="id0"/>
			<target ref="id6"/>
			<label kind="guard" x="782" y="-552">activeEnemies==0 &amp;&amp;
mainTowerLife&gt;0</label>
			<nail x="748" y="-510"/>
		</transition>
		<transition id="id10">
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="guard" x="306" y="-297">enemiesSpawned==NUM_ENEMIES</label>
			<nail x="680" y="-272"/>
		</transition>
		<transition id="id11">
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="306" y="-671">enemiesSpawned==NUM_ENEMIES</label>
			<nail x="680" y="-680"/>
		</transition>
		<transition id="id12">
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="guard" x="-450" y="-399">squaresSpawned==0</label>
			<label kind="synchronisation" x="-510" y="-382">enemySpawning[enemiesSpawned]!</label>
			<label kind="assignment" x="-450" y="-365">spawnEnemy(SQUARE)</label>
			<nail x="-340" y="-408"/>
			<nail x="-408" y="-408"/>
		</transition>
		<transition id="id13">
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="guard" x="-467" y="-620">circlesSpawned==0 &amp;&amp; 
squaresSpawned!=0</label>
			<label kind="synchronisation" x="-510" y="-586">enemySpawning[enemiesSpawned]!</label>
			<label kind="assignment" x="-450" y="-569">spawnEnemy(CIRCLE)</label>
			<nail x="-340" y="-544"/>
			<nail x="-408" y="-544"/>
		</transition>
		<transition id="id14">
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="guard" x="-680" y="-501">turretsPlaced==NUM_TURRETS</label>
		</transition>
		<transition id="id15">
			<source ref="id5"/>
			<target ref="id1"/>
			<label kind="guard" x="-272" y="-501">circlesSpawned!=0 &amp;&amp; squaresSpawned!=0</label>
		</transition>
		<transition id="id16">
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="213" y="-595">enemiesSpawned!=NUM_ENEMIES</label>
			<nail x="204" y="-646"/>
			<nail x="204" y="-510"/>
		</transition>
		<transition id="id17">
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="-178" y="-612">circlesSpawned&lt;NUM_CIRCLES &amp;&amp;
circleSpawnTimer==CIRCLE_SPAWN_TIME</label>
			<label kind="synchronisation" x="-178" y="-578">enemySpawning[enemiesSpawned]!</label>
			<label kind="assignment" x="-178" y="-561">spawnEnemy(CIRCLE)</label>
			<nail x="136" y="-510"/>
			<nail x="136" y="-646"/>
		</transition>
		<transition id="id18">
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="guard" x="213" y="-391">enemiesSpawned!=NUM_ENEMIES</label>
			<nail x="204" y="-306"/>
			<nail x="204" y="-442"/>
		</transition>
		<transition id="id19">
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="-178" y="-408">squaresSpawned&lt;NUM_SQUARES &amp;&amp;
squareSpawnTimer==SQUARE_SPAWN_TIME</label>
			<label kind="synchronisation" x="-178" y="-374">enemySpawning[enemiesSpawned]!</label>
			<label kind="assignment" x="-178" y="-357">spawnEnemy(SQUARE)</label>
			<nail x="136" y="-442"/>
			<nail x="136" y="-306"/>
		</transition>
		<transition id="id20">
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="-858" y="-399">turretsPlaced&lt;NUM_TURRETS</label>
			<label kind="synchronisation" x="-875" y="-382">turretPlacing[turretsPlaced]!</label>
			<label kind="assignment" x="-807" y="-365">placeTurret()</label>
			<nail x="-714" y="-408"/>
			<nail x="-782" y="-408"/>
		</transition>
	</template>
	<template>
		<name>EnemyTemplate</name>
		<parameter>int enemyId</parameter>
		<declaration>// Variables related to an enemy instance
int segment = 0;                      // Track in which segment of the path the enemy is
int step = 0;                         // Track in which cell of the segment the enemy is

clock moveTimer;                      // Track enemy movement time
clock spawnTimer;                     // Used to check queries

int numTurretsToAwaken;               // Track how many turrets need to be awakened
int turretToAwaken;                   // Track which turret will be awakened now
bool turretsToAwaken[MAX_TURRETS];    // Track which turrets need to be awakened


/*----------------------------------------------------------------------------------------------------*/
// GETTER FUNCTIONS

Coordinate pos() {
    return enemies[enemyId].pos;
}

int speed() {
    return enemies[enemyId].speed;
}

int health() {
    return enemies[enemyId].health;
}


/*----------------------------------------------------------------------------------------------------*/
// HELPER FUNCTIONS

// Function to initialize enemy timers
void initEnemy() {
    moveTimer = 0;
    spawnTimer = 0;
}

// Function to update position and change path if needed
// @param i    Used to select which segment to follow
void move(int i) {
    if (step &lt; SEGMENTS_LEN[segment] - 1) {
        step++;
    }
    else if (!isMainTower(pos())) {
        segment = 2 * (segment + 1) - i;    // Binary trees formula based on the order of the children
        step = 0;
    }

    enemies[enemyId].pos = SEGMENTS[segment][step];

    moveTimer = 0;
}

// Function to attack main tower
void attack() {
    if (!enemies[enemyId].active) return;

    mainTowerLife -= enemies[enemyId].damage;
}

// Function to set the enemy as inactive
void deactive() {
    if (!enemies[enemyId].active) return;

    enemies[enemyId].active = false;
    activeEnemies--;
}

// Function to check if some turret need to shoot me
void findTurretsToAwaken() {
    int t;
    
    numTurretsToAwaken = 0;
    turretToAwaken = -1;
    
    for (t = 0; t &lt; NUM_TURRETS; t++) {
        if (turrets[t].ready &amp;&amp; findTarget(t) == enemyId) {
            turretsToAwaken[t] = true;
            numTurretsToAwaken++;
        }
    }
}

// Function to select the turret that need to be awakened
void selectTurretToAwaken() {
    int t;
    
    for (t = turretToAwaken + 1; t &lt; NUM_TURRETS; t++) {
        if (turretsToAwaken[t]) {
            turretsToAwaken[t] = false;
            turretToAwaken = t;
            numTurretsToAwaken--;
            return;
        }
    }
}</declaration>
		<location id="id21" x="-510" y="-68">
			<name x="-552" y="-110">Not_Spawned</name>
			<label kind="comments" x="-629" y="-442">&gt;&gt;&gt;&gt;&gt;&gt;&gt; Not_Spawned &lt;&lt;&lt;&lt;&lt;&lt;&lt;

Used to wait for the
initialization signal. Once
received, it resets timers.</label>
		</location>
		<location id="id22" x="-170" y="-68">
			<name x="-153" y="-59">Targeted</name>
			<label kind="comments" x="-348" y="-442">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Targeted + Send_Signal &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

It checks if enemy can be targeted by any
ready turret. If yes, at each iteration,
it sends a signal to wake up the turret.</label>
			<committed/>
		</location>
		<location id="id23" x="204" y="-68">
			<name x="170" y="-119">Waiting</name>
			<label kind="exponentialrate" x="162" y="-102">10:speed()</label>
			<label kind="comments" x="51" y="-442">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Waiting &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

Used to wait for the moving period.
In the meantime, it checks
if enemy is still alive.</label>
		</location>
		<location id="id24" x="204" y="102">
			<name x="179" y="119">Moving</name>
			<label kind="comments" x="43" y="170">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Moving &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

It updates the enemy's position
and, if necessary, it selects a path.</label>
			<committed/>
		</location>
		<location id="id25" x="646" y="-68">
			<name x="629" y="-110">End</name>
			<label kind="comments" x="502" y="-442">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; End &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

Final state, enemy is dead or
has reached the Main Tower.
Enemy can't be targeted anymore.</label>
		</location>
		<location id="id26" x="-170" y="-272">
			<name x="-212" y="-314">Send_Signal</name>
			<committed/>
		</location>
		<location id="id27" x="646" y="102">
			<name x="612" y="119">Attacking</name>
			<label kind="exponentialrate" x="612" y="136">10:speed()</label>
			<label kind="comments" x="476" y="170">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Attacking &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

Enemy attack the Main Tower and wait
for the moving period to leave the map</label>
		</location>
		<init ref="id21"/>
		<transition id="id28">
			<source ref="id27"/>
			<target ref="id25"/>
			<label kind="assignment" x="553" y="9">deactive()</label>
		</transition>
		<transition id="id29">
			<source ref="id23"/>
			<target ref="id25"/>
			<label kind="guard" x="289" y="-93">health()&lt;=0 || mainTowerLife &lt;= 0</label>
		</transition>
		<transition id="id30">
			<source ref="id26"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-493" y="-178">turretAwakening[turretToAwaken]!</label>
			<nail x="-204" y="-238"/>
			<nail x="-204" y="-102"/>
		</transition>
		<transition id="id31">
			<source ref="id22"/>
			<target ref="id26"/>
			<label kind="guard" x="-127" y="-187">numTurretsToAwaken&gt;0</label>
			<label kind="assignment" x="-127" y="-170">selectTurretToAwaken()</label>
			<nail x="-136" y="-102"/>
			<nail x="-136" y="-238"/>
		</transition>
		<transition id="id32">
			<source ref="id24"/>
			<target ref="id27"/>
			<label kind="guard" x="349" y="111">isMainTower(pos())</label>
			<label kind="assignment" x="391" y="128">attack()</label>
		</transition>
		<transition id="id33">
			<source ref="id24"/>
			<target ref="id22"/>
			<label kind="guard" x="-68" y="111">!isMainTower(pos())</label>
			<label kind="assignment" x="-76" y="128">findTurretsToAwaken()</label>
			<nail x="-170" y="102"/>
		</transition>
		<transition id="id34">
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="select" x="213" y="9">i : int[0,1]</label>
			<label kind="guard" x="213" y="-8">health()&gt;0</label>
			<label kind="assignment" x="213" y="26">move(i)</label>
		</transition>
		<transition id="id35">
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="guard" x="-76" y="-93">numTurretsToAwaken==0</label>
		</transition>
		<transition id="id36">
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-442" y="-59">enemySpawning[enemyId]?</label>
			<label kind="assignment" x="-433" y="-42">initEnemy(),
findTurretsToAwaken()</label>
		</transition>
	</template>
	<template>
		<name>TurretTemplate</name>
		<parameter>int turretId</parameter>
		<declaration>// Variables related to a turret instance
clock fireTimer;    // Track turret fire time


/*----------------------------------------------------------------------------------------------------*/
// GETTER FUNCTIONS

int fireSpeed() {
    return turrets[turretId].fireSpeed;
}


/*----------------------------------------------------------------------------------------------------*/
// HELPER FUNCTIONS

// Function which applies damage from a turret to the enemy instance
// @param enemyId    The ID of the enemy that is being shot
void shoot(int enemyId) {
    turrets[turretId].ready = false;
    enemies[enemyId].health -= turrets[turretId].damage;

    if (enemies[enemyId].health &lt;= 0) {
        enemies[enemyId].active = false;
        activeEnemies--;
    }

    fireTimer = 0;
}

// Function used to check if there is an enemy in the range
void checkEnemy() {
    int targetId = findTarget(turretId);
    
    if (targetId == -1) {
        turrets[turretId].ready = true;
        return;
    }

    shoot(targetId);
}
</declaration>
		<location id="id37" x="-884" y="-68">
			<name x="-926" y="-110">Not_Placed</name>
			<label kind="comments" x="-986" y="-238">&gt;&gt;&gt;&gt;&gt; Not_Placed &lt;&lt;&lt;&lt;&lt;

Used to wait for the
initialization signal.</label>
		</location>
		<location id="id38" x="-510" y="-68">
			<name x="-493" y="-76">Firing</name>
			<label kind="comments" x="-374" y="-119">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Firing &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

It checks if a target is available:
- if yes, it shoots;
- if no, it stays ready.</label>
			<committed/>
		</location>
		<location id="id39" x="-510" y="-272">
			<name x="-535" y="-323">Reload</name>
			<label kind="exponentialrate" x="-569" y="-306">1:fireSpeed()</label>
			<label kind="comments" x="-603" y="-442">&gt;&gt;&gt;&gt;&gt;&gt; Reload &lt;&lt;&lt;&lt;&lt;&lt;

Used to wait for the 
reloading period.</label>
		</location>
		<location id="id40" x="-510" y="136">
			<name x="-527" y="153">Ready</name>
			<label kind="comments" x="-637" y="204">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ready &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

Wait for an enemy to enter
inside the range to shoot it.</label>
		</location>
		<init ref="id37"/>
		<transition id="id41">
			<source ref="id38"/>
			<target ref="id40"/>
			<label kind="guard" x="-467" y="26">turrets[turretId].ready</label>
			<nail x="-476" y="-34"/>
			<nail x="-476" y="102"/>
		</transition>
		<transition id="id42">
			<source ref="id40"/>
			<target ref="id38"/>
			<label kind="synchronisation" x="-782" y="17">turretAwakening[turretId]?</label>
			<label kind="assignment" x="-722" y="34">checkEnemy()</label>
			<nail x="-544" y="102"/>
			<nail x="-544" y="-34"/>
		</transition>
		<transition id="id43">
			<source ref="id39"/>
			<target ref="id38"/>
			<label kind="assignment" x="-663" y="-187">checkEnemy()</label>
			<nail x="-544" y="-238"/>
			<nail x="-544" y="-102"/>
		</transition>
		<transition id="id44">
			<source ref="id38"/>
			<target ref="id39"/>
			<label kind="guard" x="-467" y="-187">!turrets[turretId].ready</label>
			<nail x="-476" y="-102"/>
			<nail x="-476" y="-238"/>
		</transition>
		<transition id="id45">
			<source ref="id37"/>
			<target ref="id38"/>
			<label kind="synchronisation" x="-790" y="-93">turretPlacing[turretId]?</label>
		</transition>
	</template>
	<system>ControllerProcess = Controller();

typedef int[0, NUM_ENEMIES - 1] enemyId_t;             
EnemyProcess(const enemyId_t id) = EnemyTemplate(id); 

typedef int[0, (NUM_TURRETS - 1) &gt;? 0] turretId_t;
TurretProcess(const turretId_t id) = TurretTemplate(id);

// NO TURRETS VERSION - set SELECTED_CONFIGURATION to 0 in Declarations
// system ControllerProcess, EnemyProcess;

// WITH TURRETS VERSION - set SELECTED_CONFIGURATION to 1/2/3 in Declarations
system ControllerProcess, EnemyProcess, TurretProcess;</system>
	<queries>
		<option key="--diagnostic" value="1"/>
		<query>
			<formula>simulate [&lt;=200] {mainTowerLife}</formula>
			<comment>(Property I) Simulate the system for a maximum timeout of 200 time units and estimate how long the Main Tower remains undamaged in the configuration provided in the query (VI) in the previous section.</comment>
			<result outcome="success" type="quality" timestamp="2025-05-30 15:08:32 +0200">
				<option key="--diagnostic" value="1"/>
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="mainTowerLife" type="l" color="0xff0000" encoding="csv">0.0,100.0
4.276411442231931,100.0
4.276411442231931,98.0
7.7118960274915,98.0
7.7118960274915,96.0
10.640184994155799,96.0
10.640184994155799,92.0
12.92118872556421,92.0
12.92118872556421,90.0
13.225177499185277,90.0
13.225177499185277,86.0
14.359431571401537,86.0
14.359431571401537,82.0
14.94902679453731,82.0
14.94902679453731,80.0
17.968296584309307,80.0
17.968296584309307,78.0
22.312580448231667,78.0
22.312580448231667,76.0
24.048632061758035,76.0
24.048632061758035,72.0
24.5222728581481,72.0
24.5222728581481,70.0
25.97724307565232,70.0
25.97724307565232,68.0
28.664641284829187,68.0
28.664641284829187,66.0
31.826253552266916,66.0
31.826253552266916,62.0
32.20468825531099,62.0
32.20468825531099,58.0
33.6913288429061,58.0
33.6913288429061,56.0
33.89315990954576,56.0
33.89315990954576,54.0
35.53956183938665,54.0
35.53956183938665,50.0
38.35699087511687,50.0
38.35699087511687,46.0
40.53227899326886,46.0
40.53227899326886,42.0
40.70947236774991,42.0
40.70947236774991,40.0
41.983345623753166,40.0
41.983345623753166,38.0
43.16727360770396,38.0
43.16727360770396,34.0
45.11677476693207,34.0
45.11677476693207,30.0
47.23913954523744,30.0
47.23913954523744,28.0
48.37057049313295,28.0
48.37057049313295,26.0
49.35838381412885,26.0
49.35838381412885,22.0
49.8471145367594,22.0
49.8471145367594,18.0
50.89756706630041,18.0
50.89756706630041,16.0
54.70707689175448,16.0
54.70707689175448,14.0
56.588563566415395,14.0
56.588563566415395,12.0
58.198794918953745,12.0
58.198794918953745,10.0
61.466262151025646,10.0
61.466262151025646,8.0
62.17236781605827,8.0
62.17236781605827,4.0
62.59015789850521,4.0
62.59015789850521,0.0
200.000002,0.0
					</series>
					<comment/>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=200] ([] mainTowerLife &gt; 0)</formula>
			<comment>(Properties II / III) Determine the probability that, for a maximum timeout of 200 time units, the Main Tower survives in the configuration provided in the query (VI) in the previous section.</comment>
			<result outcome="success" type="interval" value="≤ 0.0499441 (95% CI)" timestamp="2025-05-30 15:10:24 +0200">
				<option key="--diagnostic" value="1"/>
				<details>≤ 0.0499441 (95% CI)</details>
			</result>
		</query>
	</queries>
</nta>
