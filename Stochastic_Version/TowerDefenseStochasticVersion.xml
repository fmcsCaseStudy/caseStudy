<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>clock gameTimer;    //Just for debug

/*----------------------------------------------------------------------------------------------------*/
//Constants and declarations related to the map of the game
typedef struct {
    int x;
    int y;
} Coordinate;

const Coordinate SPAWN_POS = { 0, 0 };
const Coordinate MAIN_TOWER_POS = { 15, 4 };

//Possible paths are 0-1-3 / 0-1-4 / 0-2
const int PATH_LEN = 25;
const int NUM_SEGMENTS = 5;
const int MAX_SEGMENTS_LEN = 14;
const int SEGMENTS_LEN[NUM_SEGMENTS] = { 12, 6, 14, 8, 8 };
const Coordinate SEGMENTS[NUM_SEGMENTS][MAX_SEGMENTS_LEN] = {
    { {  0, 0 }, {  0, 1 }, {  0, 2 }, {  0, 3 }, {  0, 4 }, {  1, 4 }, {  2,  4 }, {  3,  4 }, {  4,  4 }, {  5,  4 }, {  6,  4 }, {  7,  4 }, { -1, -1 }, { -1, -1 } },
    { {  7, 5 }, {  7, 6 }, {  7, 7 }, {  8, 7 }, {  9, 7 }, { 10, 7 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 } },
    { {  7, 3 }, {  7, 2 }, {  7, 1 }, {  8, 1 }, {  9, 1 }, { 10, 1 }, { 11,  1 }, { 12,  1 }, { 13,  1 }, { 14,  1 }, { 15,  1 }, { 15,  2 }, { 15,  3 }, { 15,  4 } },
    { { 11, 7 }, { 12, 7 }, { 13, 7 }, { 14, 7 }, { 15, 7 }, { 15, 6 }, { 15,  5 }, { 15,  4 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 } },
    { { 10, 6 }, { 10, 5 }, { 10, 4 }, { 11, 4 }, { 12, 4 }, { 13, 4 }, { 14,  4 }, { 15,  4 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 } }
};

const int MAX_TURRETS = 7; 


/*----------------------------------------------------------------------------------------------------*/
//Constants and declarations related to Enemy
typedef int[0,1] EnemyType;    //0 -&gt; Circle, 1 -&gt; Square
const EnemyType CIRCLE = 0;
const EnemyType SQUARE = 1;

typedef struct {
    bool active;
    Coordinate pos;
    EnemyType type;
    int speed;
    int health;
    int damage;
    int spawnTime;              //Time when enemy spawned (for targeting priority)
} Enemy;

const int CIRCLE_SPEED      =  1;
const int CIRCLE_HEALTH     = 10;
const int CIRCLE_DAMAGE     =  2;
const int CIRCLE_SPAWN_TIME =  2;

const int SQUARE_SPEED      =  3;
const int SQUARE_HEALTH     = 20;
const int SQUARE_DAMAGE     =  4;
const int SQUARE_SPAWN_TIME =  3;


/*----------------------------------------------------------------------------------------------------*/
//Constants and declarations related to Turret
typedef int[-1,2] TurretType;    //-1 -&gt; NONE, 0 -&gt; Basic, 1 -&gt; Cannon, 2 -&gt; Sniper
const TurretType NONE   = -1;    //used to fill the gaps
const TurretType BASIC  =  0;
const TurretType CANNON =  1;
const TurretType SNIPER =  2;

typedef struct {
    Coordinate pos;
    bool ready;
    int range;
    int fireSpeed;
    int damage;
} Turret;

const int BASIC_RANGE       =  2;
const int BASIC_FIRE_SPEED  =  2;
const int BASIC_DAMAGE      =  2;

const int CANNON_RANGE      =  1;
const int CANNON_FIRE_SPEED =  7;
const int CANNON_DAMAGE     =  5;

const int SNIPER_RANGE      =  4;
const int SNIPER_FIRE_SPEED = 20;
const int SNIPER_DAMAGE     =  8;


/*----------------------------------------------------------------------------------------------------*/
//Game configuration (VANILLA VERSION)
const int NUM_CIRCLES = 300;
const int NUM_SQUARES = 400;
const int NUM_ENEMIES = NUM_CIRCLES + NUM_SQUARES;

typedef struct {
    int[0, MAX_TURRETS] numTurrets;
    TurretType turretsType[MAX_TURRETS];
    Coordinate turretsPos[MAX_TURRETS];
} TurretsConfiguration;

const int NUM_CONFIGURATIONS = 4;
const TurretsConfiguration TURRETS_CONFIGUTATIONS[NUM_CONFIGURATIONS] = {
    //No turrets (PROPERTIES I-V)
    {
        0,
        { NONE, NONE, NONE, NONE, NONE, NONE, NONE },
        { { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 } }
    },
    //Default (PROPERTY VI) - Winning
    {
        7,
        { SNIPER, BASIC, CANNON, CANNON, SNIPER, CANNON, CANNON },
        { { 2, 3 }, { 5, 5 }, { 8, 2 }, { 8, 6 }, { 11, 5 }, { 14, 2 }, { 14, 6 } }
    },
    //Custom 1 (PROPERTY VIII) - Winning
    {
        5,
        { BASIC, BASIC, SNIPER, CANNON, SNIPER, NONE, NONE },
        { { 5, 5 }, { 8, 6 }, { 2, 3 }, { 11, 5 }, { 14, 2 }, { -1, -1 }, { -1, -1 } }
    },
    //Custom 2 (PROPERTY VIII) - Losing
    {
        4,
        { CANNON, CANNON, CANNON, CANNON, NONE, NONE, NONE },
        { { 14, 2 }, { 14, 6 }, { 11, 5 }, { 8, 2 }, { -1, -1 }, { -1, -1 }, { -1, -1 } }
    }
};

/////////////////////////////////////////////////////////////////////////////////////////
//                                                                                     //
//      ||      ||||        |||| |||||||||||| |||||||||||    ||||||||||||      ||      //
//      ||      ||||        |||| |||||||||||| ||||     ||||  ||||||||||||      ||      //
//      ||      ||||        |||| ||||         ||||      |||| ||||              ||      //
//      ||      ||||        |||| ||||         ||||      |||| ||||              ||      //
//      ||      |||||||||||||||| |||||||||||| ||||     ||||  ||||||||||||      ||      //
//      ||      |||||||||||||||| |||||||||||| |||||||||||    ||||||||||||      ||      //
//  \\  ||  //  ||||        |||| ||||         ||||   ||||    ||||          \\  ||  //  //
//   \\ || //   ||||        |||| ||||         ||||    ||||   ||||           \\ || //   //
//    \\||//    ||||        |||| |||||||||||| ||||     ||||  ||||||||||||    \\||//    //
//     \\//     ||||        |||| |||||||||||| ||||      |||| ||||||||||||     \\//     //
//                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////

const int[0, NUM_CONFIGURATIONS - 1] SELECTED_CONFIGURATION = 1;

/////////////////////////////////////////////////////////////////////////////////////////
//                                                                                     //
//     //\\     ||||        |||| |||||||||||| |||||||||||    ||||||||||||     //\\     //
//    //||\\    ||||        |||| |||||||||||| ||||     ||||  ||||||||||||    //||\\    //
//   // || \\   ||||        |||| ||||         ||||      |||| ||||           // || \\   //
//  //  ||  \\  ||||        |||| ||||         ||||      |||| ||||          //  ||  \\  //
//      ||      |||||||||||||||| |||||||||||| ||||     ||||  ||||||||||||      ||      //
//      ||      |||||||||||||||| |||||||||||| |||||||||||    ||||||||||||      ||      //
//      ||      ||||        |||| ||||         ||||  ||||     ||||              ||      //
//      ||      ||||        |||| ||||         ||||    ||||   ||||              ||      //
//      ||      ||||        |||| |||||||||||| ||||     ||||  ||||||||||||      ||      //
//      ||      ||||        |||| |||||||||||| ||||      |||| ||||||||||||      ||      //
//                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////

const int NUM_TURRETS = TURRETS_CONFIGUTATIONS[SELECTED_CONFIGURATION].numTurrets;

int mainTowerLife = 100;
int activeEnemies = NUM_ENEMIES;


/*----------------------------------------------------------------------------------------------------*/
//Global state and channels
Enemy enemies[NUM_ENEMIES];
Turret turrets[MAX_TURRETS];
broadcast chan enemySpawning[NUM_ENEMIES];             //channel to spawn enemy
broadcast chan turretPlacing[MAX_TURRETS];             //channel to place turrets
urgent broadcast chan turretAwakening[MAX_TURRETS];    //channel to awake turrets


/*----------------------------------------------------------------------------------------------------*/
//HELPER FUNCTIONS

//Function to calculate Chebyshev distance between two points
int distance(Coordinate pos1, Coordinate pos2) {
    int x = abs(pos1.x - pos2.x);
    int y = abs(pos1.y - pos2.y);
    
    return x &gt;? y;
}

//Function to check if the coordinate is the Main Tower's coordinate
bool isMainTower(Coordinate pos) {
    return distance(pos, MAIN_TOWER_POS) == 0;
}

//Function to check if the coordinate is on path or not
bool isPath(Coordinate pos){
    //Vertical segments
    if(pos.x ==  0 &amp;&amp; 0&lt;=pos.y &amp;&amp; pos.y&lt;=4) return true;
    if(pos.x ==  7 &amp;&amp; 1&lt;=pos.y &amp;&amp; pos.y&lt;=7) return true;
    if(pos.x == 10 &amp;&amp; 4&lt;=pos.y &amp;&amp; pos.y&lt;=7) return true;
    if(pos.x == 15 &amp;&amp; 1&lt;=pos.y &amp;&amp; pos.y&lt;=7) return true;

    //Horizontal segments
    if(pos.y == 1 &amp;&amp;  7&lt;=pos.x &amp;&amp; pos.x&lt;=15) return true;
    if(pos.y == 4 &amp;&amp;  0&lt;=pos.x &amp;&amp; pos.x&lt;= 7) return true;
    if(pos.y == 4 &amp;&amp; 10&lt;=pos.x &amp;&amp; pos.x&lt;=15) return true;
    if(pos.y == 7 &amp;&amp;  7&lt;=pos.x &amp;&amp; pos.x&lt;=15) return true;

    return false;        
}

//Function used to find a target for the turret
int findTarget(int turretId) {
    int minDistance = turrets[turretId].range;    //Initialized with the highest acceptable value
    int maxSpawnTime = -1;                        //Initialized with the highest not possible value
    int targetId = -1;                            //The ID of the enemy targeted
    int i;

    for (i = 0; i &lt; NUM_ENEMIES; i++) {
        if (enemies[i].active) {
            int d = distance(turrets[turretId].pos, enemies[i].pos);
            
            if ( d &lt; minDistance || 
                (d == minDistance &amp;&amp; enemies[i].spawnTime &gt; maxSpawnTime) || 
                (d == minDistance &amp;&amp; enemies[i].spawnTime == maxSpawnTime &amp;&amp; enemies[i].type == SQUARE)
               ) {
                minDistance = d;
                maxSpawnTime = enemies[i].spawnTime;
                targetId = i;
            }
        }
    }
    
    return targetId;
}</declaration>
	<template>
		<name>Controller</name>
		<declaration>int turretsPlaced  = 0;      //Track the number of turrets that have been placed
int circlesSpawned = 0;      //Track the number of circles that have been spawned
int squaresSpawned = 0;      //Track the number of squares that have been spawned
int enemiesSpawned = 0;      //Track the number of enemies that have been spawned (circlesSpawned + squaresSpawned)

clock circleSpawnTimer;      //Track circle spawn time
clock squareSpawnTimer;      //Track square spawn time


//Place a turret and setup the related global variables
void placeTurret() {
    TurretType type = TURRETS_CONFIGUTATIONS[SELECTED_CONFIGURATION].turretsType[turretsPlaced];
    
    turrets[turretsPlaced].ready = true;
    turrets[turretsPlaced].pos = TURRETS_CONFIGUTATIONS[SELECTED_CONFIGURATION].turretsPos[turretsPlaced];
            
    if (type == BASIC) {
        turrets[turretsPlaced].range     = BASIC_RANGE;
        turrets[turretsPlaced].fireSpeed = BASIC_FIRE_SPEED;
        turrets[turretsPlaced].damage    = BASIC_DAMAGE;
    } else if (type == CANNON) {
        turrets[turretsPlaced].range     = CANNON_RANGE;
        turrets[turretsPlaced].fireSpeed = CANNON_FIRE_SPEED;
        turrets[turretsPlaced].damage    = CANNON_DAMAGE;
    } else if (type == SNIPER)  {
        turrets[turretsPlaced].range     = SNIPER_RANGE;
        turrets[turretsPlaced].fireSpeed = SNIPER_FIRE_SPEED;
        turrets[turretsPlaced].damage    = SNIPER_DAMAGE;
    }
    
    turretsPlaced++;
}

//Spawn an enemy and setup the related global variables
void spawnEnemy(EnemyType type) {
    enemies[enemiesSpawned].active = true;
    enemies[enemiesSpawned].type   = type;
    enemies[enemiesSpawned].pos    = SPAWN_POS;

    if(type == CIRCLE) {
        enemies[enemiesSpawned].speed     = CIRCLE_SPEED;
        enemies[enemiesSpawned].health    = CIRCLE_HEALTH;
        enemies[enemiesSpawned].damage    = CIRCLE_DAMAGE;
        enemies[enemiesSpawned].spawnTime = CIRCLE_SPAWN_TIME * circlesSpawned;

        circlesSpawned++;
        circleSpawnTimer = 0;
    }
    else if(type == SQUARE) {
        enemies[enemiesSpawned].speed     = SQUARE_SPEED;
        enemies[enemiesSpawned].health    = SQUARE_HEALTH;
        enemies[enemiesSpawned].damage    = SQUARE_DAMAGE;
        enemies[enemiesSpawned].spawnTime = SQUARE_SPAWN_TIME * squaresSpawned;
        
        squaresSpawned++;
        squareSpawnTimer = 0;
    }

    enemiesSpawned++;
}

</declaration>
		<location id="id0" x="680" y="-476">
			<name x="646" y="-518">Waiting</name>
			<label kind="comments" x="552" y="-850">&gt;&gt;&gt; Waiting &lt;&lt;&lt;

Controller remains in wait
state until the end of game
is reached.</label>
		</location>
		<location id="id1" x="170" y="-476">
			<name x="196" y="-476">Spawn_Enemy</name>
			<label kind="invariant" x="221" y="-450">(circlesSpawned==NUM_CIRCLES || 
 circleSpawnTimer&lt;=CIRCLE_SPAWN_TIME) &amp;&amp;
(squaresSpawned==NUM_SQUARES || 
 squareSpawnTimer&lt;=SQUARE_SPAWN_TIME)</label>
			<label kind="comments" x="59" y="-850">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Spawn_Enemy &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

State in which rest of the
remaining enemies are 
spawned.</label>
		</location>
		<location id="id2" x="-748" y="-476">
			<name x="-799" y="-518">Place_Turret</name>
			<label kind="comments" x="-841" y="-875">&gt;&gt;&gt;&gt;&gt;&gt;&gt; Place_Turret &lt;&lt;&lt;&lt;&lt;&lt;&lt;

At each iteration:
- it setups all the variables
  related to a turret in the
  global array turrets[];
- it sends a signal to the
  related TurretProcess().</label>
			<committed/>
		</location>
		<location id="id3" x="170" y="-680">
			<name x="119" y="-722">Spawn_Circle</name>
			<committed/>
		</location>
		<location id="id4" x="170" y="-272">
			<name x="119" y="-255">Spawn_Square</name>
			<committed/>
		</location>
		<location id="id5" x="-374" y="-476">
			<name x="-357" y="-476">Initial_Enemies</name>
			<label kind="comments" x="-510" y="-867">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Initial_Enemies &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

It spawns the first two enemies
which must spawn at time 0.
The square is spawned first so 
it is targeted first
(To respect targeting priorities).</label>
			<committed/>
		</location>
		<location id="id6" x="918" y="-544">
			<name x="908" y="-578">Won</name>
		</location>
		<location id="id7" x="918" y="-382">
			<name x="908" y="-416">Lost</name>
		</location>
		<init ref="id2"/>
		<transition id="id8">
			<source ref="id0"/>
			<target ref="id7"/>
			<label kind="guard" x="698" y="-463">mainTowerLife&lt;=0</label>
		</transition>
		<transition id="id9">
			<source ref="id0"/>
			<target ref="id6"/>
			<label kind="guard" x="698" y="-544">activeEnemies==0 &amp;&amp;
mainTowerLife&gt;0</label>
		</transition>
		<transition id="id10">
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="guard" x="188" y="-408">enemiesSpawned==NUM_ENEMIES</label>
		</transition>
		<transition id="id11">
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="382" y="-671">enemiesSpawned==NUM_ENEMIES</label>
		</transition>
		<transition id="id12">
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="guard" x="-450" y="-399">squaresSpawned==0</label>
			<label kind="synchronisation" x="-510" y="-382">enemySpawning[enemiesSpawned]!</label>
			<label kind="assignment" x="-450" y="-365">spawnEnemy(SQUARE)</label>
			<nail x="-340" y="-408"/>
			<nail x="-408" y="-408"/>
		</transition>
		<transition id="id13">
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="guard" x="-467" y="-620">circlesSpawned==0 &amp;&amp; 
squaresSpawned!=0</label>
			<label kind="synchronisation" x="-510" y="-586">enemySpawning[enemiesSpawned]!</label>
			<label kind="assignment" x="-450" y="-569">spawnEnemy(CIRCLE)</label>
			<nail x="-340" y="-544"/>
			<nail x="-408" y="-544"/>
		</transition>
		<transition id="id14">
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="guard" x="-680" y="-501">turretsPlaced==NUM_TURRETS</label>
		</transition>
		<transition id="id15">
			<source ref="id5"/>
			<target ref="id1"/>
			<label kind="guard" x="-272" y="-501">circlesSpawned!=0 &amp;&amp; squaresSpawned!=0</label>
		</transition>
		<transition id="id16">
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="153" y="-578">enemiesSpawned!=NUM_ENEMIES</label>
			<nail x="204" y="-646"/>
			<nail x="204" y="-510"/>
		</transition>
		<transition id="id17">
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="-178" y="-612">circlesSpawned&lt;NUM_CIRCLES &amp;&amp;
circleSpawnTimer==CIRCLE_SPAWN_TIME</label>
			<label kind="synchronisation" x="-178" y="-578">enemySpawning[enemiesSpawned]!</label>
			<label kind="assignment" x="-178" y="-561">spawnEnemy(CIRCLE)</label>
			<nail x="136" y="-510"/>
			<nail x="136" y="-646"/>
		</transition>
		<transition id="id18">
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="guard" x="204" y="-408">enemiesSpawned!=NUM_ENEMIES</label>
			<nail x="204" y="-306"/>
			<nail x="204" y="-442"/>
		</transition>
		<transition id="id19">
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="-178" y="-408">squaresSpawned&lt;NUM_SQUARES &amp;&amp;
squareSpawnTimer==SQUARE_SPAWN_TIME</label>
			<label kind="synchronisation" x="-178" y="-374">enemySpawning[enemiesSpawned]!</label>
			<label kind="assignment" x="-178" y="-357">spawnEnemy(SQUARE)</label>
			<nail x="136" y="-442"/>
			<nail x="136" y="-306"/>
		</transition>
		<transition id="id20">
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="-858" y="-399">turretsPlaced&lt;NUM_TURRETS</label>
			<label kind="synchronisation" x="-875" y="-382">turretPlacing[turretsPlaced]!</label>
			<label kind="assignment" x="-807" y="-365">placeTurret()</label>
			<nail x="-714" y="-408"/>
			<nail x="-782" y="-408"/>
		</transition>
	</template>
	<template>
		<name>EnemyTemplate</name>
		<parameter>int enemyId</parameter>
		<declaration>//Variables related to an enemy instance
int segment = 0;                      //Track in which segment of the path the enemy is
int step = 0;                         //Track in which cell of the segment the enemy is

clock moveTimer;                      //Track enemy movement time
clock spawnTimer;                     //Used to check queries

int numTurretsToAwaken;               //Track how many turrets need to be awakened
int turretToAwaken;                   //Track which turret will be awakened now
bool turretsToAwaken[MAX_TURRETS];    //Track which turrets need to be awakened


/*----------------------------------------------------------------------------------------------------*/
//GETTER FUNCTIONS

Coordinate pos() {
    return enemies[enemyId].pos;
}

int speed() {
    return enemies[enemyId].speed;
}

int health() {
    return enemies[enemyId].health;
}


/*----------------------------------------------------------------------------------------------------*/
//HELPER FUNCTIONS

void initEnemy() {
    moveTimer = 0;
    spawnTimer = 0;
}

//Function to update position and change path if needed
void move(int i) {
    if (step &lt; SEGMENTS_LEN[segment] - 1) {
        step++;
    }
    else if (!isMainTower(pos())) {
        segment = 2 * (segment + 1) - i;    //Binary trees formula based on the order of the children
        step = 0;
    }

    enemies[enemyId].pos = SEGMENTS[segment][step];

    moveTimer = 0;
}

//Function to attack main tower
void attack() {
    if (!enemies[enemyId].active) return;

    mainTowerLife -= enemies[enemyId].damage;
}

//Function to set the enemy as inactive
void deactive() {
    if (!enemies[enemyId].active) return;

    enemies[enemyId].active = false;
    activeEnemies--;
}

//Function to check if some turret need to shoot me
void findTurretsToAwaken() {
    int t;
    
    numTurretsToAwaken = 0;
    turretToAwaken = -1;
    
    for (t = 0; t &lt; NUM_TURRETS; t++) {
        if (turrets[t].ready &amp;&amp; findTarget(t) == enemyId) {
            turretsToAwaken[t] = true;
            numTurretsToAwaken++;
        }
    }
}

//Function to select the turret that need to be awakened
void selectTurretToAwaken() {
    int t;
    
    for (t = turretToAwaken + 1; t &lt; NUM_TURRETS; t++) {
        if (turretsToAwaken[t]) {
            turretsToAwaken[t] = false;
            turretToAwaken = t;
            numTurretsToAwaken--;
            return;
        }
    }
}</declaration>
		<location id="id21" x="-510" y="-68">
			<name x="-552" y="-110">Not_Spawned</name>
			<label kind="comments" x="-722" y="-425">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Not_Spawned &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

Used to for wait the initialization
signal. Once received, it resets timers.</label>
		</location>
		<location id="id22" x="-170" y="-68">
			<name x="-153" y="-59">Targeted</name>
			<label kind="comments" x="-331" y="-442">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Targeted + Send_Signal &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

It checks if enemy can be targeted by any
ready turret. If yes, at each iteration,
it sends a signal to wake up the turret.</label>
			<committed/>
		</location>
		<location id="id23" x="170" y="-68">
			<name x="136" y="-119">Waiting</name>
			<label kind="exponentialrate" x="178" y="-42">10:speed()</label>
			<label kind="comments" x="42" y="-442">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Waiting &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

Used to wait for the moving period.
In the meantime, it checks
if enemy is still alive.</label>
		</location>
		<location id="id24" x="170" y="102">
			<name x="145" y="119">Moving</name>
			<label kind="comments" x="26" y="170">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Moving &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

It updates the enemy's position
and, if necessary, it selects a path.</label>
			<committed/>
		</location>
		<location id="id25" x="612" y="-68">
			<name x="595" y="-110">End</name>
			<label kind="comments" x="485" y="-442">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; End &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

Final state, enemy is dead or
has reached the Main Tower.
Enemy can't be targeted anymore.</label>
		</location>
		<location id="id26" x="-170" y="-272">
			<name x="-212" y="-314">Send_Signal</name>
			<committed/>
		</location>
		<location id="id27" x="612" y="102">
			<name x="578" y="119">Attacking</name>
			<label kind="invariant" x="544" y="136">moveTimer&lt;=speed()</label>
			<label kind="comments" x="476" y="170">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Attacking &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

Enemy attack the Main Tower and wait
for the moving period to leave the map</label>
		</location>
		<init ref="id21"/>
		<transition id="id28">
			<source ref="id27"/>
			<target ref="id25"/>
			<label kind="guard" x="459" y="0">moveTimer==speed()</label>
			<label kind="assignment" x="493" y="17">deactive()</label>
		</transition>
		<transition id="id29">
			<source ref="id23"/>
			<target ref="id25"/>
			<label kind="guard" x="349" y="-93">health()&lt;=0</label>
		</transition>
		<transition id="id30">
			<source ref="id26"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-467" y="-178">turretAwakening[turretToAwaken]!</label>
			<nail x="-204" y="-238"/>
			<nail x="-204" y="-102"/>
		</transition>
		<transition id="id31">
			<source ref="id22"/>
			<target ref="id26"/>
			<label kind="guard" x="-127" y="-187">numTurretsToAwaken&gt;0</label>
			<label kind="assignment" x="-127" y="-170">selectTurretToAwaken()</label>
			<nail x="-136" y="-102"/>
			<nail x="-136" y="-238"/>
		</transition>
		<transition id="id32">
			<source ref="id24"/>
			<target ref="id27"/>
			<label kind="guard" x="315" y="111">isMainTower(pos())</label>
			<label kind="assignment" x="357" y="128">attack()</label>
		</transition>
		<transition id="id33">
			<source ref="id24"/>
			<target ref="id22"/>
			<label kind="guard" x="-76" y="111">!isMainTower(pos())</label>
			<label kind="assignment" x="-85" y="128">findTurretsToAwaken()</label>
			<nail x="-170" y="102"/>
		</transition>
		<transition id="id34">
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="select" x="179" y="17">i : int[0,1]</label>
			<label kind="guard" x="179" y="-17">health()&gt;0</label>
			<label kind="assignment" x="179" y="34">move(i)</label>
		</transition>
		<transition id="id35">
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="guard" x="-85" y="-93">numTurretsToAwaken==0</label>
		</transition>
		<transition id="id36">
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-433" y="-59">enemySpawning[enemyId]?</label>
			<label kind="assignment" x="-425" y="-42">initEnemy(),
findTurretsToAwaken()</label>
		</transition>
	</template>
	<template>
		<name>TurretTemplate</name>
		<parameter>int turretId</parameter>
		<declaration>//Variables related to a turret instance
clock fireTimer;    //Track turret fire time


/*----------------------------------------------------------------------------------------------------*/
//GETTER FUNCTIONS

int fireSpeed() {
    return turrets[turretId].fireSpeed;
}


/*----------------------------------------------------------------------------------------------------*/
//HELPER FUNCTIONS

//Function which applies damage from a turret to the enemy instance
void shoot(int enemyId) {
    turrets[turretId].ready = false;
    enemies[enemyId].health -= turrets[turretId].damage;

    if (enemies[enemyId].health &lt;= 0) {
        enemies[enemyId].active = false;
        activeEnemies--;
    }

    fireTimer = 0;
}

//Function used to check if there is an enemy in the range
void checkEnemy() {
    int targetId = findTarget(turretId);
    
    if (targetId == -1) {
        turrets[turretId].ready = true;
        return;
    }

    shoot(targetId);
}
</declaration>
		<location id="id37" x="-884" y="-68">
			<name x="-926" y="-110">Not_Placed</name>
			<label kind="comments" x="-1028" y="-221">&gt;&gt;&gt;&gt;&gt; Not_Placed &lt;&lt;&lt;&lt;&lt;

Used to wait for the
initialization signal.</label>
		</location>
		<location id="id38" x="-510" y="-68">
			<name x="-493" y="-76">Firing</name>
			<label kind="comments" x="-340" y="-102">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Firing &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

It checks if a target is available:
- if yes, it shoots;
- if no, it stays ready.</label>
			<committed/>
		</location>
		<location id="id39" x="-510" y="-272">
			<name x="-535" y="-323">Reload</name>
			<label kind="exponentialrate" x="-459" y="-221">1:fireSpeed()</label>
			<label kind="comments" x="-629" y="-433">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Reload &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

Used to wait for the 
reloading period.</label>
		</location>
		<location id="id40" x="-510" y="136">
			<name x="-527" y="153">Ready</name>
			<label kind="comments" x="-637" y="204">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ready &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

Wait for an enemy to enter
inside the range to shoot it.</label>
		</location>
		<init ref="id37"/>
		<transition id="id41">
			<source ref="id38"/>
			<target ref="id40"/>
			<label kind="guard" x="-467" y="26">turrets[turretId].ready</label>
			<nail x="-476" y="-34"/>
			<nail x="-476" y="102"/>
		</transition>
		<transition id="id42">
			<source ref="id40"/>
			<target ref="id38"/>
			<label kind="synchronisation" x="-765" y="17">turretAwakening[turretId]?</label>
			<label kind="assignment" x="-705" y="34">checkEnemy()</label>
			<nail x="-544" y="102"/>
			<nail x="-544" y="-34"/>
		</transition>
		<transition id="id43">
			<source ref="id39"/>
			<target ref="id38"/>
			<label kind="assignment" x="-688" y="-170">checkEnemy()</label>
			<nail x="-544" y="-238"/>
			<nail x="-544" y="-102"/>
		</transition>
		<transition id="id44">
			<source ref="id38"/>
			<target ref="id39"/>
			<label kind="guard" x="-467" y="-187">!turrets[turretId].ready</label>
			<nail x="-476" y="-102"/>
			<nail x="-476" y="-238"/>
		</transition>
		<transition id="id45">
			<source ref="id37"/>
			<target ref="id38"/>
			<label kind="synchronisation" x="-790" y="-93">turretPlacing[turretId]?</label>
		</transition>
	</template>
	<system>ControllerProcess = Controller();

typedef int[0, NUM_ENEMIES - 1] enemyId_t;             
EnemyProcess(const enemyId_t id) = EnemyTemplate(id); 

typedef int[0, (NUM_TURRETS - 1) &gt;? 0] turretId_t;
TurretProcess(const turretId_t id) = TurretTemplate(id);

//NO TURRETS VERSION - set SELECTED_CONFIGURATION to 0 in Declarations
//system ControllerProcess, EnemyProcess;

//WITH TURRETS VERSION - set SELECTED_CONFIGURATION to 1/2/3 in Declarations
system ControllerProcess, EnemyProcess, TurretProcess;</system>
	<queries>
		<option key="--diagnostic" value="1"/>
		<query>
			<formula>simulate [&lt;=200] {mainTowerLife}</formula>
			<comment>4s undamaged, query I</comment>
			<result outcome="success" type="quality" timestamp="2025-05-22 12:51:19 +0200">
				<option key="--diagnostic" value="1"/>
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="mainTowerLife" type="l" color="0xff0000" encoding="csv">0.0,100.0
4.525549084784347,100.0
4.525549084784347,98.0
7.4401055272975585,98.0
7.4401055272975585,96.0
10.585767599128456,96.0
10.585767599128456,94.0
11.717537749549308,94.0
11.717537749549308,92.0
13.828231783117594,92.0
13.828231783117594,88.0
14.044725176460954,88.0
14.044725176460954,84.0
15.361514715157645,84.0
15.361514715157645,80.0
16.363183756693537,80.0
16.363183756693537,78.0
18.302858399979737,78.0
18.302858399979737,74.0
20.53424520176414,74.0
20.53424520176414,72.0
22.098044436986022,72.0
22.098044436986022,68.0
22.204601105756446,68.0
22.204601105756446,66.0
23.939727107256505,66.0
23.939727107256505,64.0
24.66869093870513,64.0
24.66869093870513,60.0
26.11327666823415,60.0
26.11327666823415,58.0
26.771801455744967,58.0
26.771801455744967,54.0
29.10453821145022,54.0
29.10453821145022,52.0
30.5257263642959,52.0
30.5257263642959,48.0
32.640911471087705,48.0
32.640911471087705,46.0
34.06098442108659,46.0
34.06098442108659,44.0
34.66373331700201,44.0
34.66373331700201,40.0
36.169242130123216,40.0
36.169242130123216,38.0
38.292670157849294,38.0
38.292670157849294,36.0
38.37822082531873,36.0
38.37822082531873,32.0
40.10576052059616,32.0
40.10576052059616,30.0
41.093088044500576,30.0
41.093088044500576,26.0
41.829144884030384,26.0
41.829144884030384,24.0
44.312759105485306,24.0
44.312759105485306,20.0
45.8356875621642,20.0
45.8356875621642,16.0
46.90621126579644,16.0
46.90621126579644,14.0
49.617634267391956,14.0
49.617634267391956,12.0
50.41204724581943,12.0
50.41204724581943,10.0
50.64553578307107,10.0
50.64553578307107,6.0
52.91781493739684,6.0
52.91781493739684,4.0
53.43659553336223,4.0
53.43659553336223,0.0
54.00030940587675,0.0
54.00030940587675,-4.0
54.65338788773932,-4.0
54.65338788773932,-6.0
57.728698964008686,-6.0
57.728698964008686,-8.0
60.0126753692597,-8.0
60.0126753692597,-12.0
60.575570653349125,-12.0
60.575570653349125,-14.0
61.36162391903531,-14.0
61.36162391903531,-18.0
62.33841227376628,-18.0
62.33841227376628,-20.0
64.23000010315297,-20.0
64.23000010315297,-22.0
65.7554210559939,-22.0
65.7554210559939,-26.0
66.49284468261773,-26.0
66.49284468261773,-30.0
68.29836507401693,-30.0
68.29836507401693,-32.0
69.95786910737961,-32.0
69.95786910737961,-34.0
72.32153090894633,-34.0
72.32153090894633,-38.0
72.97447776040083,-38.0
72.97447776040083,-40.0
73.69068305861262,-40.0
73.69068305861262,-44.0
74.27409704851948,-44.0
74.27409704851948,-46.0
76.81355253350604,-46.0
76.81355253350604,-48.0
77.05960417873676,-48.0
77.05960417873676,-52.0
78.33513397982648,-52.0
78.33513397982648,-56.0
78.8829700607164,-56.0
78.8829700607164,-58.0
80.6521680015225,-58.0
80.6521680015225,-60.0
81.82905493060336,-60.0
81.82905493060336,-62.0
83.78559238318573,-62.0
83.78559238318573,-66.0
84.92790064636102,-66.0
84.92790064636102,-68.0
86.27517161450191,-68.0
86.27517161450191,-70.0
86.88735467638719,-70.0
86.91520651441576,-74.0
86.91520651441576,-78.0
87.96086743886613,-78.0
87.96086743886613,-80.0
90.93774461411324,-80.0
90.93774461411324,-82.0
91.6840640318171,-82.0
91.6840640318171,-84.0
92.78170639820077,-84.0
92.78170639820077,-88.0
93.71926806170038,-88.0
93.71926806170038,-92.0
94.26733318177656,-92.0
94.26733318177656,-94.0
97.10353415538592,-94.0
97.10353415538592,-96.0
98.46035299422034,-96.0
98.46035299422034,-98.0
98.93764239707959,-98.0
98.93764239707959,-102.0
99.36977965263137,-102.0
99.36977965263137,-106.0
100.71204258565461,-106.0
100.71204258565461,-108.0
101.93032171496641,-108.0
101.93032171496641,-112.0
103.64078941712708,-112.0
103.64078941712708,-114.0
105.60530332009597,-114.0
105.60530332009597,-118.0
107.49482757377471,-118.0
107.49482757377471,-120.0
109.48552614474328,-120.0
109.48552614474328,-124.0
110.52830699033763,-124.0
110.52830699033763,-126.0
111.75695430136615,-126.0
111.75695430136615,-130.0
113.05886594368242,-130.0
113.05886594368242,-132.0
115.08819366267768,-132.0
115.08819366267768,-134.0
115.6960637574885,-134.0
115.6960637574885,-138.0
116.19200497696662,-138.0
116.19200497696662,-140.0
118.07709439549282,-140.0
118.1016518341705,-144.0
118.1016518341705,-146.0
119.88933427550268,-146.0
119.88933427550268,-148.0
120.23168325118583,-148.0
120.23168325118583,-152.0
122.50069102525167,-152.0
122.50069102525167,-154.0
125.12252016338675,-154.0
125.12252016338675,-156.0
125.45500891227512,-156.0
125.45500891227512,-160.0
126.41760546468782,-160.0
126.41760546468782,-162.0
126.6221572227613,-162.0
126.6221572227613,-166.0
129.4386306700853,-166.0
129.4386306700853,-168.0
131.9142150230945,-168.0
131.9142150230945,-172.0
133.00433072722183,-172.0
133.00433072722183,-174.0
133.8264602624341,-174.0
133.8264602624341,-176.0
134.64155287573598,-176.0
134.64155287573598,-180.0
135.28949710613594,-180.0
135.28949710613594,-184.0
136.6206416912228,-184.0
136.6206416912228,-186.0
137.82954371916193,-186.0
137.82954371916193,-188.0
139.65979327696667,-188.0
139.65979327696667,-190.0
141.12951235269637,-190.0
141.12951235269637,-194.0
142.01955503063428,-194.0
142.01955503063428,-196.0
144.5482409998693,-196.0
144.5482409998693,-198.0
144.62812656106803,-198.0
144.62812656106803,-202.0
146.67091033430003,-202.0
146.67091033430003,-204.0
147.56129647193367,-204.0
147.56129647193367,-208.0
148.47480818428264,-208.0
148.47480818428264,-212.0
148.55684818544492,-212.0
148.55684818544492,-214.0
150.77573226652387,-214.0
150.77573226652387,-218.0
150.90577921881078,-218.0
150.90577921881078,-220.0
152.48460771022835,-220.0
152.48460771022835,-222.0
152.68974693324608,-222.0
152.68974693324608,-226.0
154.51250234679202,-226.0
154.51250234679202,-228.0
157.0115918506084,-228.0
157.0115918506084,-230.0
157.0771127491446,-230.0
157.0771127491446,-234.0
158.7335370864002,-234.0
158.7335370864002,-236.0
160.12143389576244,-236.0
160.12143389576244,-240.0
160.43837521548835,-240.0
160.43837521548835,-242.0
162.06773914894976,-242.0
162.06773914894976,-246.0
162.35575853759218,-246.0
162.35575853759218,-248.0
163.73399119396686,-248.0
163.73399119396686,-250.0
165.44717202250473,-250.0
165.44717202250473,-254.0
165.99257017461483,-254.0
165.99257017461483,-258.0
166.86657606955055,-258.0
166.86657606955055,-260.0
168.38646102984703,-260.0
168.38646102984703,-262.0
170.04401772962999,-262.0
170.04401772962999,-264.0
172.08811754453131,-264.0
172.08811754453131,-266.0
172.5318654591202,-266.0
172.5318654591202,-270.0
175.0538355171416,-270.0
175.0538355171416,-272.0
175.79045038267583,-272.0
175.79045038267583,-276.0
177.0074315359523,-276.0
177.0074315359523,-278.0
178.4004976865565,-278.0
178.4004976865565,-280.0
178.97170471151276,-280.0
178.97170471151276,-284.0
180.12992934596016,-284.0
180.12992934596016,-286.0
181.68983799672608,-286.0
181.68983799672608,-290.0
183.16295247959383,-290.0
183.16295247959383,-292.0
184.18129709730815,-292.0
184.18129709730815,-296.0
184.51325191171793,-296.0
184.51325191171793,-298.0
186.4256191013676,-298.0
186.4256191013676,-300.0
187.66207791624575,-300.0
187.66207791624575,-304.0
188.55584090718838,-304.0
188.55584090718838,-306.0
189.5271852168639,-306.0
189.5271852168639,-310.0
190.22018972821778,-310.0
190.22018972821778,-312.0
192.37873472683128,-312.0
192.37873472683128,-314.0
193.68805853091112,-314.0
193.68805853091112,-318.0
194.1104962973289,-318.0
194.1104962973289,-320.0
196.1251923819546,-320.0
196.1251923819546,-322.0
196.45347117232848,-322.0
196.45347117232848,-326.0
197.30366343770123,-326.0
197.30366343770123,-330.0
198.30010868876204,-330.0
198.30010868876204,-332.0
200.000002,-332.0
					</series>
					<comment/>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=200] ([] mainTowerLife &lt;= 0)</formula>
			<comment>query II, 1-probability of losing</comment>
		</query>
	</queries>
</nta>
