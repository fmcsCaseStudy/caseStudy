<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.
//typedef
typedef int[0,1] EnemyType; //0 -&gt; Circle, 1 -&gt; Square
const EnemyType CIRCLE = 0;
const EnemyType SQUARE = 1;

typedef int[0,2] TurretType;
const TurretType BASIC  =  0;
const TurretType CANNON =  1;
const TurretType SNIPER =  2;

//struct
typedef struct {
    int x;
    int y;
} Coordinate;
const Coordinate SPAWN_POS = { 0, 0};
const Coordinate MAIN_TOWER_POS = { 15, 4};

typedef struct {
    bool active;
    int health;
    EnemyType type;
    Coordinate pos;
    int spawnTime;  //Time when enemy spawned (for targeting priority)
} Enemy;

typedef struct {
    Coordinate pos;
    bool ready;
    int damage;
    int range;
} Turret;

// game data
const int NUM_PATH = 5;
const int MAX_PATH_LEN = 14;
const int PATHS_LEN[NUM_PATH] = { 12, 6, 14, 8, 8 };
const Coordinate PATHS[NUM_PATH][MAX_PATH_LEN] = {
    { {  0, 0 }, {  0, 1 }, {  0, 2 }, {  0, 3 }, {  0, 4 }, {  1, 4 }, {  2,  4 }, {  3,  4 }, {  4,  4 }, {  5,  4 }, {  6,  4 }, {  7,  4 }, { -1, -1 }, { -1, -1 } },
    { {  7, 5 }, {  7, 6 }, {  7, 7 }, {  8, 7 }, {  9, 7 }, { 10, 7 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 } },
    { {  7, 3 }, {  7, 2 }, {  7, 1 }, {  8, 1 }, {  9, 1 }, { 10, 1 }, { 11,  1 }, { 12,  1 }, { 13,  1 }, { 14,  1 }, { 15,  1 }, { 15,  2 }, { 15,  3 }, { 15,  4 } },
    { { 11, 7 }, { 12, 7 }, { 13, 7 }, { 14, 7 }, { 15, 7 }, { 15, 6 }, { 15,  5 }, { 15,  4 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 } },
    { { 10, 6 }, { 10, 5 }, { 10, 4 }, { 11, 4 }, { 12, 4 }, { 13, 4 }, { 14,  4 }, { 15,  4 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 } }
};

const int CIRCLE_SPEED = 1;
const int CIRCLE_HEALTH = 10;
const int CIRCLE_DAMAGE = 2;
const int SQUARE_SPEED = 3;
const int SQUARE_HEALTH = 20;
const int SQUARE_DAMAGE = 4;
const int CIRCLE_SPAWN_TIME = 2;
const int SQUARE_SPAWN_TIME = 3;
const int BASIC_RANGE       =  2;
const int BASIC_FIRE_SPEED  =  2;
const int BASIC_DAMAGE      =  2;
const int CANNON_RANGE      =  1;
const int CANNON_FIRE_SPEED =  7;
const int CANNON_DAMAGE     =  5;
const int SNIPER_RANGE      =  4;
const int SNIPER_FIRE_SPEED = 20;
const int SNIPER_DAMAGE     =  8;

// game configuration

const int NUM_CIRCLES = 3;
const int NUM_SQUARES = 3;
const int NUM_ENEMIES = NUM_CIRCLES + NUM_SQUARES;
const int NUM_TURRETS = 7;
const int TURRETS_TYPE[NUM_TURRETS] = {BASIC, BASIC, BASIC, BASIC, BASIC, BASIC, BASIC};
const Coordinate TURRETS_POS[NUM_TURRETS] = {{ 2, 3 }, { 5, 5 }, { 8, 2 }, { 8, 6 }, { 11, 5 }, { 14, 2 }, { 14, 6 }};
int mainTowerLife = 10;


//global state
Enemy enemies[NUM_ENEMIES];
Turret turrets[NUM_TURRETS];
//global channel
chan enemySpawning[NUM_ENEMIES];
chan turretPositioning[7];
chan enemyHit[NUM_ENEMIES][TurretType];
urgent broadcast chan posUpdate;


bool isPath(Coordinate pos){
    //Vertical segments
    if(pos.x ==  0 &amp;&amp; 0&lt;=pos.y &amp;&amp; pos.y&lt;=4) return true;
    if(pos.x ==  7 &amp;&amp; 1&lt;=pos.y &amp;&amp; pos.y&lt;=7) return true;
    if(pos.x == 10 &amp;&amp; 4&lt;=pos.y &amp;&amp; pos.y&lt;=7) return true;
    if(pos.x == 15 &amp;&amp; 1&lt;=pos.y &amp;&amp; pos.y&lt;=7) return true;

    //Horizontal segments
    if(pos.y == 1 &amp;&amp;  7&lt;=pos.x &amp;&amp; pos.x&lt;=15) return true;
    if(pos.y == 4 &amp;&amp;  0&lt;=pos.x &amp;&amp; pos.x&lt;= 7) return true;
    if(pos.y == 4 &amp;&amp; 10&lt;=pos.x &amp;&amp; pos.x&lt;=15) return true;
    if(pos.y == 7 &amp;&amp;  7&lt;=pos.x &amp;&amp; pos.x&lt;=15) return true;

    return false;        
}



</declaration>
	<template>
		<name x="5" y="5">SpawnController</name>
		<declaration>// Place local declarations here.
int turretsPlaced = 0;
int circlesSpawned = 0;      //Track the number of circles that have been spawned
int squaresSpawned = 0;      //Track the number of squares that have been spawned
int enemiesSpawned = 0; 

clock circleSpawnTimer;      //Track circle spawn time
clock squareSpawnTimer;      //Track square spawn time

void placeTurret() {
    if (TURRETS_TYPE[turretsPlaced] == BASIC) {
        turrets[turretsPlaced].ready = false;
        turrets[turretsPlaced].pos = TURRETS_POS[turretsPlaced];
        turrets[turretsPlaced].damage = BASIC_RANGE;
        turrets[turretsPlaced].range = BASIC_DAMAGE;
    } else if (TURRETS_TYPE[turretsPlaced] == CANNON) {
        turrets[turretsPlaced].ready = false;
        turrets[turretsPlaced].pos = TURRETS_POS[turretsPlaced];
        turrets[turretsPlaced].damage = CANNON_RANGE;
        turrets[turretsPlaced].range = CANNON_DAMAGE;
    } else {
        turrets[turretsPlaced].ready = false;
        turrets[turretsPlaced].pos = TURRETS_POS[turretsPlaced];
        turrets[turretsPlaced].damage = SNIPER_RANGE;
        turrets[turretsPlaced].range = SNIPER_DAMAGE;
    }
    turretsPlaced = turretsPlaced + 1;
}

void spawnEnemy(EnemyType type) {
    enemies[enemiesSpawned].active = true;
    enemies[enemiesSpawned].type   = type;
    enemies[enemiesSpawned].pos    = SPAWN_POS;
    if(type == CIRCLE) {
        enemies[enemiesSpawned].spawnTime = circlesSpawned * CIRCLE_SPAWN_TIME;
        enemies[enemiesSpawned].health = CIRCLE_HEALTH;
        circlesSpawned += 1;
        circleSpawnTimer = 0;
    }
    else {
        enemies[enemiesSpawned].spawnTime = squaresSpawned * SQUARE_SPAWN_TIME;
        enemies[enemiesSpawned].health = SQUARE_HEALTH;
        squaresSpawned += 1;
        squareSpawnTimer = 0;
    }
    enemiesSpawned += 1;
}</declaration>
		<location id="id0" x="-85" y="0">
			<name x="-127" y="17">Spawn_Turret</name>
			<committed/>
		</location>
		<location id="id1" x="340" y="0">
			<name x="195" y="8">Spawn_Enemy</name>
			<label kind="invariant" x="8" y="-255">(circlesSpawned==NUM_CIRCLES || circleSpawnTimer&lt;=CIRCLE_SPAWN_TIME) &amp;&amp;
(squaresSpawned==NUM_SQUARES || squareSpawnTimer&lt;=SQUARE_SPAWN_TIME)</label>
		</location>
		<location id="id2" x="680" y="0">
			<name x="705" y="-25">End_Spawn</name>
		</location>
		<location id="id3" x="340" y="-102">
			<name x="330" y="-136">Spawn_Circle</name>
			<committed/>
		</location>
		<location id="id4" x="340" y="102">
			<name x="289" y="127">Spawn_Square</name>
			<committed/>
		</location>
		<init ref="id0"/>
		<transition id="id5">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-255" y="-102">turretsPlaced&lt;NUM_TURRETS &amp;&amp; NUM_TURRETS &gt; 0</label>
			<label kind="synchronisation" x="-204" y="-119">turretPositioning[turretsPlaced]!</label>
			<label kind="assignment" x="-127" y="-136">placeTurret()</label>
			<nail x="17" y="-76"/>
			<nail x="-187" y="-76"/>
		</transition>
		<transition id="id6">
			<source ref="id4"/>
			<target ref="id1"/>
			<nail x="238" y="68"/>
		</transition>
		<transition id="id7">
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="391" y="119">squaresSpawned&lt;NUM_SQUARES &amp;&amp;
squareSpawnTimer==SQUARE_SPAWN_TIME</label>
			<label kind="synchronisation" x="433" y="93">enemySpawning[enemiesSpawned]!</label>
			<label kind="assignment" x="493" y="68">spawnEnemy(SQUARE)</label>
			<nail x="442" y="68"/>
		</transition>
		<transition id="id8">
			<source ref="id3"/>
			<target ref="id1"/>
			<nail x="238" y="-68"/>
		</transition>
		<transition id="id9">
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="459" y="-144">circlesSpawned&lt;NUM_CIRCLES &amp;&amp;
circleSpawnTimer==CIRCLE_SPAWN_TIME</label>
			<label kind="synchronisation" x="399" y="-178">enemySpawning[enemiesSpawned]!</label>
			<label kind="assignment" x="484" y="-93">spawnEnemy(CIRCLE)</label>
			<nail x="442" y="-68"/>
		</transition>
		<transition id="id10">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="442" y="-59">circlesSpawned==NUM_CIRCLES &amp;&amp; squaresSpawned==NUM_SQUARES</label>
		</transition>
		<transition id="id11">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-8" y="-25">turretsPlaced==NUM_TURRETS</label>
		</transition>
	</template>
	<template>
		<name>DamageController</name>
		<declaration>clock timer;



int distance(Coordinate pos1, Coordinate pos2) {
    return abs(pos1.x - pos2.x) + abs(pos1.y - pos2.y);
}

void applyDamage(int enemyId, int turretId) {
    enemies[enemyId].health = enemies[enemyId].health - turrets[turretId].damage;
    if(enemies[enemyId].health &lt;= 0) {
        enemies[enemyId].active = false;
    }
}

void findTarget() {
    int i;
    int j;
    int d;
    int targetEnemy;
    int minDistance;
    int spawnTime;
    for(i = 0; i &lt; NUM_TURRETS; i++) {
        targetEnemy = -1;
        minDistance = turrets[i].range*2;
        spawnTime = -1;
        if(turrets[j].ready) {
            for(j = 0; j &lt; NUM_ENEMIES; j++) {
                d = distance(turrets[i].pos, enemies[j].pos);
                if(enemies[j].active &amp;&amp; (
                    (d &lt; minDistance) ||
                    (d == minDistance &amp;&amp; enemies[i].spawnTime &gt;= spawnTime) ||
                    (d == minDistance &amp;&amp; enemies[i].spawnTime &gt;= spawnTime &amp;&amp; enemies[i].type == SQUARE)
                    )) {
                    minDistance = d;
                    spawnTime = enemies[i].spawnTime;
                    targetEnemy = j;
                }
            }
            if(targetEnemy != -1) {
                applyDamage(targetEnemy, i);
                turrets[i].ready = false;  
            }
        }
    }
}
</declaration>
		<location id="id12" x="-476" y="0">
			<name x="-561" y="-17">Waiting</name>
			<label kind="invariant" x="-486" y="17">timer &lt;= 2</label>
		</location>
		<location id="id13" x="-136" y="0">
			<name x="-110" y="-17">Checking</name>
			<committed/>
		</location>
		<init ref="id12"/>
		<transition id="id14">
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="assignment" x="-458" y="136">timer = 0</label>
			<nail x="-136" y="136"/>
			<nail x="-476" y="136"/>
		</transition>
		<transition id="id15">
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="-458" y="-170">timer == 2</label>
			<label kind="assignment" x="-357" y="-136">findTarget()</label>
			<nail x="-476" y="-136"/>
			<nail x="-136" y="-136"/>
		</transition>
	</template>
	<template>
		<name>EnemyTemplate</name>
		<parameter>int enemyId</parameter>
		<declaration>int speed;
int damage;
int step;
int path;
bool changeP;
bool isMainTower;
clock spawnTimer;
clock moveTimer; 
int counter = 0;

void initEnemy() {
    if (enemies[enemyId].type == CIRCLE) {
        speed = CIRCLE_SPEED;
        damage = CIRCLE_DAMAGE;
    } else {
        speed = SQUARE_SPEED;
        damage = SQUARE_DAMAGE;
    }
    changeP = false;
    enemies[enemyId].pos = SPAWN_POS;
    path = 0;
    step = 0;    
    moveTimer = 0;
    spawnTimer = 0;

}

void stepIncre() {
    moveTimer = 0;
    if(step &lt; PATHS_LEN[path]-1){
        step = step + 1; //just increment else change path
    }
    else{
        changeP = true;
    }
    isMainTower = enemies[enemyId].pos.x==MAIN_TOWER_POS.x &amp;&amp; enemies[enemyId].pos.y==MAIN_TOWER_POS.y;
}

void updateCor() {
    enemies[enemyId].pos.x = PATHS[path][step].x;
    enemies[enemyId].pos.y = PATHS[path][step].y;
}

void updatePath(int i) {
    if(path == 0 || path == 1) {
        path = path + 1 + i;
    }
    if(path == 1) {
        path = path + 2 + i;
    }
    step = 0;
    changeP = false;
}

void applyDamage() {
    if(enemies[enemyId].active) {
        if(enemies[enemyId].type == CIRCLE) {
            mainTowerLife-=CIRCLE_DAMAGE;
        }
        else {
            mainTowerLife-=SQUARE_DAMAGE;
        }
    }
    enemies[enemyId].active = false;
}</declaration>
		<location id="id16" x="-204" y="0">
			<name x="-272" y="-59">Not_Spawned</name>
		</location>
		<location id="id17" x="102" y="0">
			<name x="92" y="-34">Waiting</name>
			<label kind="invariant" x="93" y="102">moveTimer&lt;=speed</label>
		</location>
		<location id="id18" x="952" y="0">
			<name x="942" y="-34">End</name>
		</location>
		<location id="id19" x="340" y="-204">
			<name x="330" y="-238">Moving</name>
			<committed/>
		</location>
		<location id="id20" x="-34" y="-314">
			<name x="-44" y="-348">changePa</name>
			<committed/>
		</location>
		<init ref="id16"/>
		<transition id="id21">
			<source ref="id20"/>
			<target ref="id17"/>
			<label kind="select" x="-110" y="-221">i : int[0,1]</label>
			<label kind="assignment" x="-102" y="-187">updatePath(i)</label>
		</transition>
		<transition id="id22">
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="guard" x="68" y="-331">!isMainTower &amp;&amp; (changeP)</label>
		</transition>
		<transition id="id23">
			<source ref="id19"/>
			<target ref="id17"/>
			<label kind="guard" x="85" y="-178">!isMainTower &amp;&amp; (!changeP)</label>
			<label kind="assignment" x="119" y="-195">updateCor()</label>
			<nail x="102" y="-204"/>
		</transition>
		<transition id="id24">
			<source ref="id17"/>
			<target ref="id19"/>
			<label kind="guard" x="153" y="-17">!isMainTower &amp;&amp; moveTimer==speed</label>
			<label kind="assignment" x="85" y="68">stepIncre()</label>
			<nail x="238" y="-102"/>
			<nail x="238" y="-102"/>
		</transition>
		<transition id="id25">
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="guard" x="654" y="-170">isMainTower</label>
			<label kind="assignment" x="671" y="-204">applyDamage()</label>
		</transition>
		<transition id="id26">
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-153" y="-34">enemySpawning[enemyId]?</label>
			<label kind="assignment" x="-186" y="0">initEnemy()</label>
		</transition>
	</template>
	<template>
		<name>TurretTemplate</name>
		<parameter>int turretId</parameter>
		<declaration>int fireRate;
clock fireTimer;  

void setTurretStats() {
    if (TURRETS_TYPE[turretId] == BASIC) {
        fireRate = BASIC_FIRE_SPEED;
    } else if (TURRETS_TYPE[turretId]) {
        fireRate = CANNON_FIRE_SPEED;
    } else {
        fireRate = SNIPER_FIRE_SPEED;
    }
}

void setFalse() {
    turrets[turretId].ready = false;  
    fireTimer = 0; 
}

void setTrue() {
    turrets[turretId].ready = true;   
}



</declaration>
		<location id="id27" x="-782" y="0">
			<name x="-792" y="-34">Not_Placed</name>
		</location>
		<location id="id28" x="-408" y="0">
			<name x="-442" y="-51">Reaload</name>
			<label kind="invariant" x="-476" y="68">fireTimer &lt;= fireRate</label>
		</location>
		<location id="id29" x="34" y="0">
			<name x="8" y="-42">Ready</name>
			<label kind="invariant" x="24" y="17">turrets[turretId].ready</label>
		</location>
		<init ref="id27"/>
		<transition id="id30">
			<source ref="id29"/>
			<target ref="id28"/>
			<label kind="guard" x="-136" y="127">!turrets[turretId].ready</label>
			<label kind="assignment" x="-221" y="153">setFalse()</label>
			<nail x="-170" y="136"/>
		</transition>
		<transition id="id31">
			<source ref="id28"/>
			<target ref="id29"/>
			<label kind="guard" x="-289" y="-59">fireTimer==fireRate</label>
			<label kind="assignment" x="-238" y="8">setTrue()</label>
		</transition>
		<transition id="id32">
			<source ref="id27"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-731" y="-25">turretPositioning[turretId]?</label>
			<label kind="assignment" x="-697" y="0">setTurretStats()</label>
		</transition>
	</template>
	<system>g = SpawnController();
d = DamageController();

typedef int[0, NUM_ENEMIES - 1] enemyId_t;                         //bounded integer type with values [1..enemyNumber]
EnemyProcess(const enemyId_t id) = EnemyTemplate(id); 
TurretProcess0 = TurretTemplate(0);
TurretProcess1 = TurretTemplate(1);
TurretProcess2 = TurretTemplate(2);
TurretProcess3 = TurretTemplate(3);
TurretProcess4 = TurretTemplate(4);
TurretProcess5 = TurretTemplate(5);
TurretProcess6 = TurretTemplate(6);
system g, d, EnemyProcess, TurretProcess0, TurretProcess1,TurretProcess2,TurretProcess3,TurretProcess4,TurretProcess5,TurretProcess6;</system>
	<queries>
		<query>
			<formula>A[] (deadlock imply forall (i : enemyId_t) EnemyProcess(i).End)
</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-06 15:24:29 +0200">
			</result>
		</query>
		<query>
			<formula>A&lt;&gt; forall(i : enemyId_t) (enemies[i].pos.x==MAIN_TOWER_POS.x &amp;&amp; enemies[i].pos.y==MAIN_TOWER_POS.y)</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-05 17:51:18 +0200">
			</result>
		</query>
		<query>
			<formula>A[] (forall(i : enemyId_t) ((enemies[i].type == SQUARE &amp;&amp; EnemyProcess(i).Moving) imply EnemyProcess(i).spawnTimer&lt;=26*SQUARE_SPEED))</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-05 17:51:22 +0200">
			</result>
		</query>
		<query>
			<formula>A[] (forall(i : enemyId_t) ((enemies[i].type == CIRCLE &amp;&amp; EnemyProcess(i).Moving) imply EnemyProcess(i).spawnTimer&lt;=26*CIRCLE_SPEED))</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-05 17:51:20 +0200">
			</result>
		</query>
		<query>
			<formula>A[] forall(i : enemyId_t) isPath(enemies[i].pos)</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-05 17:51:24 +0200">
			</result>
		</query>
	</queries>
</nta>
