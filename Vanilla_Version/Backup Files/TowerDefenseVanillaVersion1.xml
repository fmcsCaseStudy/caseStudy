<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>/*----------------------------------------------------------------------------------------------------*/

//Constants related to Map of the game
const int MAP_WIDTH = 16;
const int MAP_HEIGHT = 9;

typedef struct {
    int x;
    int y;
} Coordinate;

const Coordinate SPAWN_POS = { 0, 0};
const Coordinate MAIN_TOWER_POS = { 15, 4};

// DO NOT CHANGE THE PATHS ORDER!!!
//possible path are 0-1-3 / 0-1-4 / 0-2
const int NUM_PATH = 5;
const int MAX_PATH_LEN = 14;
const int PATHS_LEN[NUM_PATH] = { 12, 6, 14, 8, 8 };
const Coordinate PATHS[5][MAX_PATH_LEN] = {
    { {  0, 0 }, {  0, 1 }, {  0, 2 }, {  0, 3 }, {  0, 4 }, {  1, 4 }, {  2,  4 }, {  3,  4 }, {  4,  4 }, {  5,  4 }, {  6,  4 }, {  7,  4 }, { -1, -1 }, { -1, -1 } },
    { {  7, 5 }, {  7, 6 }, {  7, 7 }, {  8, 7 }, {  9, 7 }, { 10, 7 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 } },
    { {  7, 3 }, {  7, 2 }, {  7, 1 }, {  8, 1 }, {  9, 1 }, { 10, 1 }, { 11,  1 }, { 12,  1 }, { 13,  1 }, { 14,  1 }, { 15,  1 }, { 15,  2 }, { 15,  3 }, { 15,  4 } },
    { { 11, 7 }, { 12, 7 }, { 13, 7 }, { 14, 7 }, { 15, 7 }, { 15, 6 }, { 15,  5 }, { 15,  4 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 } },
    { { 10, 6 }, { 10, 5 }, { 10, 4 }, { 11, 4 }, { 12, 4 }, { 13, 4 }, { 14,  4 }, { 15,  4 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 } }
};

const int TURRETS_POS_LEN = 7;
const Coordinate TURRETS_POS[TURRETS_POS_LEN] = {
    { 2, 3 }, { 5, 5 }, { 8, 2 }, { 8, 6 }, { 11, 5 }, { 14, 2 }, { 14, 6 }
};


/*----------------------------------------------------------------------------------------------------*/
//Constants related to Main Tower
const int MAIN_TOWER_LIFE = 10;


/*----------------------------------------------------------------------------------------------------*/
//Constants related to Enemy
typedef int[0,1] EnemyType; //0 -&gt; Circle, 1 -&gt; Square
const EnemyType CIRCLE = 0;
const EnemyType SQUARE = 1;

const int CIRCLE_SPEED = 1;
const int CIRCLE_HEALTH = 10;
const int CIRCLE_DAMAGE = 2;
const int SQUARE_SPEED = 3;
const int SQUARE_HEALTH = 20;
const int SQUARE_DAMAGE = 4;

const int CIRCLE_SPAWN_TIME = 2;
const int SQUARE_SPAWN_TIME = 3;

typedef struct {
    bool active;
    EnemyType type;
    Coordinate pos;
    int spawnTime;  //Time when enemy spawned (for targeting priority)
} Enemy;


/*----------------------------------------------------------------------------------------------------*/
//Constants related to Turret
typedef int[-1,2] TurretType; //-1 -&gt; NONE, 0 -&gt; Basic, 1 -&gt; Cannon, 2 -&gt; Sniper
const TurretType NONE   = -1;     //Used to fill the gaps
const TurretType BASIC  =  0;
const TurretType CANNON =  1;
const TurretType SNIPER =  2;

const int BASIC_RANGE       =  2;
const int BASIC_FIRE_SPEED  =  2;
const int BASIC_DAMAGE      =  2;

const int CANNON_RANGE      =  1;
const int CANNON_FIRE_SPEED =  7;
const int CANNON_DAMAGE     =  5;

const int SNIPER_RANGE      =  4;
const int SNIPER_FIRE_SPEED = 20;
const int SNIPER_DAMAGE     =  8;

typedef struct {
    bool placed;
    TurretType type;
    Coordinate pos;
} Turret;


/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/
//Enemy Wave Parameters (VANILLA VERSION)
const int NUM_CIRCLES = 3;
const int NUM_SQUARES = 3;
const int NUM_ENEMIES = NUM_CIRCLES + NUM_SQUARES;

//Turret CONFIGURATION - Empty (PROPERTY II)
const int[0, TURRETS_POS_LEN] NUM_TURRETS = 0;
const TurretType TURRET_TYPES[TURRETS_POS_LEN] = {
    NONE, NONE, NONE, NONE, NONE, NONE, NONE
};
const int[-1, TURRETS_POS_LEN-1] TURRET_SELECTED_POS[TURRETS_POS_LEN] = {
    -1, -1, -1, -1, -1, -1, -1
};
/*
*/

/*
//Turret CONFIGURATION - Default (PROPERTY VI)
const int[0, TURRETS_POS_LEN] NUM_TURRETS = 7;
const TurretType TURRET_TYPES[TURRETS_POS_LEN] = {
   BASIC, CANNON, CANNON, CANNON, CANNON, SNIPER, SNIPER
};
const int[-1, TURRETS_POS_LEN-1] TURRET_SELECTED_POS[TURRETS_POS_LEN] = {
   1, 2, 3, 5, 6, 0, 4
};
*/

/*
//Turret CONFIGURATION - 1 (PROPERTY VIII)
const int[0, TURRETS_POS_LEN] NUM_TURRETS = 4;
const TurretType TURRET_TYPES[TURRETS_POS_LEN] = {
   CANNON, CANNON, CANNON, CANNON, NONE, NONE, NONE
};
const int[-1, TURRETS_POS_LEN-1] TURRET_SELECTED_POS[TURRETS_POS_LEN] = {
   1, 3, 4, 6, -1, -1, -1
};
*/

/*
//Turret CONFIGURATION - 2 (PROPERTY VIII)
const int[0, TURRETS_POS_LEN] NUM_TURRETS = 4;
const TurretType TURRET_TYPES[TURRETS_POS_LEN] = {
   SNIPER, SNIPER, SNIPER, BASIC, NONE, NONE, NONE
};
const int[-1, TURRETS_POS_LEN-1] TURRET_SELECTED_POS[TURRETS_POS_LEN] = {
   0, 2, 5, 1, -1, -1, -1
};
*/

const bool PEACEFUL_MODE = (NUM_TURRETS == 0);

/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/


/*----------------------------------------------------------------------------------------------------*/
//Game State Variables
Enemy enemies[NUM_ENEMIES];
Turret turrets[TURRETS_POS_LEN];

int mainTowerLife = MAIN_TOWER_LIFE;
int activeEnemies = NUM_ENEMIES;

bool gameWon = false;
bool gameOver = false;


/*----------------------------------------------------------------------------------------------------*/
//Some channels to allow synchronization
chan turretPositioning[TURRETS_POS_LEN];
chan enemySpawning[NUM_ENEMIES];
chan enemyHit[NUM_ENEMIES][TurretType];
chan towerAttacking[EnemyType];


/*----------------------------------------------------------------------------------------------------*/
//Helper Functions

//Calculate Manhattan distance between two points
int distance(Coordinate pos1, Coordinate pos2) {
    return abs(pos1.x - pos2.x) + abs(pos1.y - pos2.y);
}

//Check if a cell is the Main Tower
bool isMainTower(Coordinate pos) {
    return pos.x == MAIN_TOWER_POS.x &amp;&amp; pos.y == MAIN_TOWER_POS.y;
}

//Check if a cell is a Path
bool isPath(Coordinate pos){
    //Vertical segments
    if(pos.x ==  0 &amp;&amp; 0&lt;=pos.y &amp;&amp; pos.y&lt;=4) return true;
    if(pos.x ==  7 &amp;&amp; 1&lt;=pos.y &amp;&amp; pos.y&lt;=7) return true;
    if(pos.x == 10 &amp;&amp; 4&lt;=pos.y &amp;&amp; pos.y&lt;=7) return true;
    if(pos.x == 15 &amp;&amp; 1&lt;=pos.y &amp;&amp; pos.y&lt;=7) return true;

    //Horizontal segments
    if(pos.y == 1 &amp;&amp;  7&lt;=pos.x &amp;&amp; pos.x&lt;=15) return true;
    if(pos.y == 4 &amp;&amp;  0&lt;=pos.x &amp;&amp; pos.x&lt;= 7) return true;
    if(pos.y == 4 &amp;&amp; 10&lt;=pos.x &amp;&amp; pos.x&lt;=15) return true;
    if(pos.y == 7 &amp;&amp;  7&lt;=pos.x &amp;&amp; pos.x&lt;=15) return true;

    return false;        
}


</declaration>
	<template>
		<name>GameController</name>
		<declaration>int turretsPlaced = 0;       //Track the number of turrets that have been placed
int circlesSpawned = 0;      //Track the number of circles that have been spawned
int squaresSpawned = 0;      //Track the number of squares that have been spawned
int enemiesSpawned = 0;      //Track the number of enemies that have been spawned (circlesSpawned + squaresSpawned)

clock gameTimer;             //Track game time
clock circleSpawnTimer;      //Track circle spawn time
clock squareSpawnTimer;      //Track square spawn time


//Place a turret and setup the related global variables
void placeTurret() {
    turrets[turretsPlaced].placed = true;
    turrets[turretsPlaced].type   = TURRET_TYPES[turretsPlaced];
    turrets[turretsPlaced].pos    = TURRETS_POS[TURRET_SELECTED_POS[turretsPlaced]];

    turretsPlaced += 1;
}

//Spawn an enemy and setup the related global variables
void spawnEnemy(EnemyType type) {
    enemies[enemiesSpawned].active = true;
    enemies[enemiesSpawned].type   = type;
    enemies[enemiesSpawned].pos    = SPAWN_POS;

    if(type == CIRCLE) {
        enemies[enemiesSpawned].spawnTime = circlesSpawned * CIRCLE_SPAWN_TIME;

        circlesSpawned += 1;
        circleSpawnTimer = 0;
    }
    else {
        enemies[enemiesSpawned].spawnTime = squaresSpawned * SQUARE_SPAWN_TIME;

        squaresSpawned += 1;
        squareSpawnTimer = 0;
    }

    enemiesSpawned += 1;
}

</declaration>
		<location id="id0" x="238" y="-272">
			<name x="222" y="-255">Won</name>
		</location>
		<location id="id1" x="102" y="-272">
			<name x="85" y="-254">Lost</name>
		</location>
		<location id="id2" x="170" y="-476">
			<name x="85" y="-476">Playing</name>
			<label kind="invariant" x="204" y="-493">(circlesSpawned==NUM_CIRCLES || circleSpawnTimer&lt;=CIRCLE_SPAWN_TIME) &amp;&amp;
(squaresSpawned==NUM_SQUARES || squareSpawnTimer&lt;=SQUARE_SPAWN_TIME)</label>
		</location>
		<location id="id3" x="-748" y="-476">
			<name x="-799" y="-519">Place_Turret</name>
			<committed/>
		</location>
		<location id="id4" x="102" y="-680">
			<name x="52" y="-723">Spawn_Circle</name>
			<committed/>
		</location>
		<location id="id5" x="238" y="-680">
			<name x="187" y="-722">Spawn_Square</name>
			<committed/>
		</location>
		<location id="id6" x="-374" y="-476">
			<name x="-357" y="-476">Initial_Enemies</name>
			<committed/>
		</location>
		<init ref="id3"/>
		<transition id="id7">
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="guard" x="-450" y="-399">squaresSpawned==0</label>
			<label kind="synchronisation" x="-510" y="-382">enemySpawning[enemiesSpawned]!</label>
			<label kind="assignment" x="-450" y="-365">spawnEnemy(SQUARE)</label>
			<nail x="-340" y="-408"/>
			<nail x="-408" y="-408"/>
		</transition>
		<transition id="id8">
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="guard" x="-450" y="-603">circlesSpawned==0</label>
			<label kind="synchronisation" x="-510" y="-586">enemySpawning[enemiesSpawned]!</label>
			<label kind="assignment" x="-450" y="-569">spawnEnemy(CIRCLE)</label>
			<nail x="-340" y="-544"/>
			<nail x="-408" y="-544"/>
		</transition>
		<transition id="id9">
			<source ref="id3"/>
			<target ref="id6"/>
			<label kind="guard" x="-680" y="-501">turretsPlaced==NUM_TURRETS</label>
			<label kind="assignment" x="-612" y="-476">gameTimer=0</label>
		</transition>
		<transition id="id10">
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="guard" x="-272" y="-501">circlesSpawned!=0 &amp;&amp; squaresSpawned!=0</label>
		</transition>
		<transition id="id11">
			<source ref="id4"/>
			<target ref="id2"/>
			<nail x="153" y="-680"/>
			<nail x="153" y="-544"/>
		</transition>
		<transition id="id12">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-212" y="-637">circlesSpawned&lt;NUM_CIRCLES &amp;&amp;
circleSpawnTimer==CIRCLE_SPAWN_TIME</label>
			<label kind="synchronisation" x="-212" y="-603">enemySpawning[enemiesSpawned]!</label>
			<label kind="assignment" x="-212" y="-586">spawnEnemy(CIRCLE)</label>
			<nail x="102" y="-544"/>
		</transition>
		<transition id="id13">
			<source ref="id5"/>
			<target ref="id2"/>
			<nail x="187" y="-680"/>
			<nail x="187" y="-544"/>
		</transition>
		<transition id="id14">
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="guard" x="246" y="-637">squaresSpawned&lt;NUM_SQUARES &amp;&amp;
squareSpawnTimer==SQUARE_SPAWN_TIME</label>
			<label kind="synchronisation" x="246" y="-603">enemySpawning[enemiesSpawned]!</label>
			<label kind="assignment" x="246" y="-586">spawnEnemy(SQUARE)</label>
			<nail x="238" y="-544"/>
		</transition>
		<transition id="id15">
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="-858" y="-400">turretsPlaced&lt;NUM_TURRETS</label>
			<label kind="synchronisation" x="-884" y="-383">turretPositioning[turretsPlaced]!</label>
			<label kind="assignment" x="-807" y="-366">placeTurret()</label>
			<nail x="-714" y="-408"/>
			<nail x="-782" y="-408"/>
		</transition>
		<transition id="id16">
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-51" y="-357">mainTowerLife&lt;=0</label>
			<label kind="assignment" x="-51" y="-340">gameOver=true</label>
			<nail x="101" y="-408"/>
		</transition>
		<transition id="id17">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="246" y="-374">activeEnemies==0 &amp;&amp;
mainTowerLife&gt;0</label>
			<label kind="assignment" x="246" y="-340">gameWon=true</label>
			<nail x="238" y="-408"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">MainTower</name>
		<location id="id18" x="-544" y="-34">
			<name x="-569" y="-76">Alive</name>
		</location>
		<location id="id19" x="-34" y="-34">
			<name x="-25" y="-17">Hit</name>
			<committed/>
		</location>
		<location id="id20" x="374" y="-34">
			<name x="332" y="-76">Destroyed</name>
		</location>
		<init ref="id18"/>
		<transition id="id21">
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="guard" x="102" y="-59">mainTowerLife&lt;=0</label>
		</transition>
		<transition id="id22">
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-391" y="-9">towerAttacking[SQUARE]?</label>
			<label kind="assignment" x="-408" y="25">mainTowerLife-=SQUARE_DAMAGE</label>
			<nail x="-442" y="17"/>
			<nail x="-136" y="17"/>
		</transition>
		<transition id="id23">
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="guard" x="-357" y="111">mainTowerLife&gt;0</label>
			<nail x="-34" y="136"/>
			<nail x="-544" y="136"/>
		</transition>
		<transition id="id24">
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-391" y="-110">towerAttacking[CIRCLE]?</label>
			<label kind="assignment" x="-408" y="-76">mainTowerLife-=CIRCLE_DAMAGE</label>
			<nail x="-442" y="-85"/>
			<nail x="-136" y="-85"/>
		</transition>
	</template>
	<template>
		<name>TurretTemplate</name>
		<parameter>int turretId</parameter>
		<declaration>TurretType type;

int fireRate;            //How fast turret instance can fire
int damage;              //Damage dealt by turret instance
int range;               //Attack range of turret instance

int targetEnemy = -1;    //ID of the enemy being targeted(-1 means no target)
clock targetTimer; 
clock fireTimer;         //Timer for tracking reload time

//Set turret instance stats based on type of turret
void setTurretStats() {
    type = turrets[turretId].type;

    if (type == BASIC) {
        fireRate = BASIC_FIRE_SPEED;
        damage = BASIC_DAMAGE;
        range = BASIC_RANGE;
    } else if (type == CANNON) {
        fireRate = CANNON_FIRE_SPEED;
        damage = CANNON_DAMAGE;
        range = CANNON_RANGE;
    } else {
        fireRate = SNIPER_FIRE_SPEED;
        damage = SNIPER_DAMAGE;
        range = SNIPER_RANGE;
    }
}

//Check if an enemy is in a turret's range
bool inRange(Coordinate turretPos, int range, Coordinate enemyPos) {
    return distance(turretPos, enemyPos) &lt;= range;
}

//Find the best target for a turret
void findTarget() {
    Coordinate turretPos = turrets[turretId].pos;
    int minDistance = MAP_WIDTH + MAP_HEIGHT; //Initialize with a large value
    int maxSpawnTime = -1; //For enemies at same distance
    int i;

    for ( i = 0; i &lt; NUM_ENEMIES; i++) {
        if (enemies[i].active &amp;&amp; inRange(turretPos, range, enemies[i].pos)) {
            int d = distance(turretPos, enemies[i].pos);
            if ( d &lt; minDistance || 
                (d == minDistance &amp;&amp; enemies[i].spawnTime &gt; maxSpawnTime) || 
                (d == minDistance &amp;&amp; enemies[i].spawnTime == maxSpawnTime &amp;&amp; enemies[i].type == SQUARE)
               ) {
                minDistance = d;
                maxSpawnTime = enemies[i].spawnTime;
                targetEnemy = i;
            }
        }
    }
    
    targetTimer = 0;
}
</declaration>
		<location id="id25" x="-1122" y="-374">
			<name x="-1173" y="-416">Not_Placed</name>
		</location>
		<location id="id26" x="-680" y="-374">
			<name x="-654" y="-391">Idle</name>
			<label kind="invariant" x="-654" y="-374">targetTimer&lt;=1</label>
		</location>
		<location id="id27" x="-34" y="-374">
			<name x="-60" y="-416">Firing</name>
			<committed/>
		</location>
		<location id="id28" x="136" y="-374">
			<name x="43" y="-416">Reloading</name>
			<label kind="invariant" x="52" y="-357">fireTimer&lt;=fireRate</label>
		</location>
		<location id="id29" x="-408" y="-374">
			<name x="-416" y="-416">Searching</name>
			<committed/>
		</location>
		<init ref="id25"/>
		<transition id="id30">
			<source ref="id29"/>
			<target ref="id27"/>
			<label kind="guard" x="-289" y="-399">targetEnemy!=-1</label>
			<label kind="synchronisation" x="-331" y="-365">enemyHit[targetEnemy][type]!</label>
			<label kind="assignment" x="-272" y="-340">fireTimer=0</label>
		</transition>
		<transition id="id31">
			<source ref="id29"/>
			<target ref="id26"/>
			<label kind="guard" x="-612" y="-331">targetEnemy==-1</label>
			<nail x="-476" y="-306"/>
			<nail x="-612" y="-306"/>
		</transition>
		<transition id="id32">
			<source ref="id26"/>
			<target ref="id29"/>
			<label kind="guard" x="-620" y="-493">targetEnemy==-1 &amp;&amp; 
targetTimer==1</label>
			<label kind="assignment" x="-595" y="-433">findTarget()</label>
			<nail x="-612" y="-442"/>
			<nail x="-476" y="-442"/>
		</transition>
		<transition id="id33">
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-1020" y="-399">turretPositioning[turretId]?</label>
			<label kind="assignment" x="-969" y="-365">setTurretStats()</label>
		</transition>
		<transition id="id34">
			<source ref="id28"/>
			<target ref="id26"/>
			<label kind="guard" x="-357" y="-569">fireTimer==fireRate</label>
			<label kind="assignment" x="-340" y="-535">targetEnemy=-1,
targetTimer=0</label>
			<nail x="136" y="-544"/>
			<nail x="-680" y="-544"/>
		</transition>
		<transition id="id35">
			<source ref="id27"/>
			<target ref="id28"/>
		</transition>
	</template>
	<template>
		<name>EnemyTemplate</name>
		<parameter>int enemyId</parameter>
		<declaration>EnemyType type;

int speed;               //Movement speed of the enemy instance
int health;              //Current health of the enemy instance
int damage;              //Damage enemy instance deals to the tower

Coordinate pos;          //Current { X, Y } position
clock moveTimer;         //Timer for controlling movement speed

int damageReceived;      //Damage Received by the enemy instance to the main tower

int[0,4] currentPath;    //0-&gt;PATH_1, 1-&gt;PATH_1_1, 2-&gt;PATH_1_2, 3-&gt;PATH_1_1_1, 4-&gt;PATH_1_1_2
int step;                //Position in the path

//Initialize enemy instance based on its type
void initEnemy() {
    type = enemies[enemyId].type;

    if (type == CIRCLE) {
        speed = CIRCLE_SPEED;
        health = CIRCLE_HEALTH;
        damage = CIRCLE_DAMAGE;
    } else {
        speed = SQUARE_SPEED;
        health = SQUARE_HEALTH;
        damage = SQUARE_DAMAGE;
    }

    pos = SPAWN_POS;
    enemies[enemyId].pos = SPAWN_POS;

    currentPath = 0;
    step = 0;    

    moveTimer = 0;
}

//Move the enemy to the next cell selecting a random path when needed
void move(int i) {
    if(step &lt; PATHS_LEN[currentPath] - 1){
        step++;
    }
    else if(!isMainTower(pos)){
        currentPath = 2 * (currentPath + 1) - i; //Binary trees formula based on the order of the children
        step = 0;
    }

    pos = PATHS[currentPath][step];
    enemies[enemyId].pos = PATHS[currentPath][step];

    moveTimer = 0;
}

//Update the health of the enemy
void receiveDamage(int damageReceived) {
    health -= damageReceived;
}

//Deactive an enemy when he dies or left the map
void deactiveEnemy() {
    enemies[enemyId].active = false;
    activeEnemies--;
}</declaration>
		<location id="id36" x="-1122" y="-476">
			<name x="-1173" y="-518">Not_Spawned</name>
		</location>
		<location id="id37" x="-782" y="-476">
			<name x="-756" y="-493">Waiting</name>
			<label kind="invariant" x="-756" y="-476">moveTimer&lt;=speed</label>
		</location>
		<location id="id38" x="-408" y="-476">
			<name x="-433" y="-518">Moving</name>
			<committed/>
		</location>
		<location id="id39" x="-34" y="-408">
			<name x="-76" y="-467">Attacking</name>
			<label kind="invariant" x="-102" y="-450">moveTimer&lt;=speed</label>
		</location>
		<location id="id40" x="272" y="-34">
			<name x="255" y="-77">Dead</name>
		</location>
		<location id="id41" x="272" y="-476">
			<name x="255" y="-518">Left_Map</name>
		</location>
		<location id="id42" x="-408" y="-187">
			<name x="-425" y="-229">Hit</name>
			<committed/>
		</location>
		<init ref="id36"/>
		<transition id="id43">
			<source ref="id38"/>
			<target ref="id41"/>
			<label kind="guard" x="-153" y="-586">isMainTower(pos) &amp;&amp;
PEACEFUL_MODE</label>
			<label kind="assignment" x="-136" y="-535">deactiveEnemy()</label>
			<nail x="-340" y="-544"/>
			<nail x="204" y="-544"/>
		</transition>
		<transition id="id44">
			<source ref="id37"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-773" y="-145">enemyHit[enemyId][SNIPER]?</label>
			<label kind="assignment" x="-782" y="-110">receiveDamage(SNIPER_DAMAGE)</label>
			<nail x="-850" y="-306"/>
			<nail x="-850" y="-119"/>
			<nail x="-510" y="-119"/>
		</transition>
		<transition id="id45">
			<source ref="id37"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-773" y="-212">enemyHit[enemyId][CANNON]?</label>
			<label kind="assignment" x="-782" y="-178">receiveDamage(CANNON_DAMAGE)</label>
			<nail x="-816" y="-306"/>
			<nail x="-816" y="-187"/>
		</transition>
		<transition id="id46">
			<source ref="id42"/>
			<target ref="id39"/>
			<label kind="guard" x="-255" y="-348">health&gt;0 &amp;&amp;
isMainTower(pos)</label>
			<nail x="-306" y="-306"/>
			<nail x="-68" y="-306"/>
		</transition>
		<transition id="id47">
			<source ref="id39"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-280" y="-212">enemyHit[enemyId][CANNON]?</label>
			<label kind="assignment" x="-289" y="-178">receiveDamage(CANNON_DAMAGE)</label>
			<nail x="0" y="-306"/>
			<nail x="0" y="-187"/>
		</transition>
		<transition id="id48">
			<source ref="id39"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-280" y="-145">enemyHit[enemyId][SNIPER]?</label>
			<label kind="assignment" x="-289" y="-110">receiveDamage(SNIPER_DAMAGE)</label>
			<nail x="34" y="-306"/>
			<nail x="34" y="-119"/>
			<nail x="-306" y="-119"/>
		</transition>
		<transition id="id49">
			<source ref="id39"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-280" y="-281">enemyHit[enemyId][BASIC]?</label>
			<label kind="assignment" x="-289" y="-246">receiveDamage(BASIC_DAMAGE)</label>
			<nail x="-34" y="-255"/>
			<nail x="-306" y="-255"/>
		</transition>
		<transition id="id50">
			<source ref="id42"/>
			<target ref="id40"/>
			<label kind="guard" x="-110" y="-59">health&lt;=0</label>
			<label kind="assignment" x="-136" y="-34">deactiveEnemy()</label>
			<nail x="-408" y="-34"/>
		</transition>
		<transition id="id51">
			<source ref="id42"/>
			<target ref="id37"/>
			<label kind="guard" x="-705" y="-348">health&gt;0 &amp;&amp;
!isMainTower(pos)</label>
			<nail x="-510" y="-306"/>
			<nail x="-748" y="-306"/>
		</transition>
		<transition id="id52">
			<source ref="id37"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-773" y="-281">enemyHit[enemyId][BASIC]?</label>
			<label kind="assignment" x="-782" y="-247">receiveDamage(BASIC_DAMAGE)</label>
			<nail x="-782" y="-255"/>
			<nail x="-510" y="-255"/>
		</transition>
		<transition id="id53">
			<source ref="id39"/>
			<target ref="id41"/>
			<label kind="guard" x="34" y="-433">moveTimer==speed</label>
			<label kind="assignment" x="34" y="-399">deactiveEnemy()</label>
			<nail x="204" y="-408"/>
		</transition>
		<transition id="id54">
			<source ref="id38"/>
			<target ref="id37"/>
			<label kind="guard" x="-671" y="-433">!isMainTower(pos)</label>
			<nail x="-476" y="-408"/>
			<nail x="-714" y="-408"/>
		</transition>
		<transition id="id55">
			<source ref="id38"/>
			<target ref="id39"/>
			<label kind="guard" x="-306" y="-450">isMainTower(pos) &amp;&amp;
!PEACEFUL_MODE</label>
			<label kind="synchronisation" x="-306" y="-399">towerAttacking[type]!</label>
			<nail x="-340" y="-408"/>
		</transition>
		<transition id="id56">
			<source ref="id37"/>
			<target ref="id38"/>
			<label kind="select" x="-646" y="-535">i : int[0,1]</label>
			<label kind="guard" x="-663" y="-569">moveTimer==speed</label>
			<label kind="assignment" x="-629" y="-510">move(i)</label>
			<nail x="-714" y="-544"/>
			<nail x="-476" y="-544"/>
		</transition>
		<transition id="id57">
			<source ref="id36"/>
			<target ref="id37"/>
			<label kind="synchronisation" x="-1054" y="-501">enemySpawning[enemyId]?</label>
			<label kind="assignment" x="-1003" y="-467">initEnemy()</label>
		</transition>
	</template>
	<system>typedef int[0, (NUM_TURRETS - 1) &gt;? 0] turretId_t;                 //bounded integer type with values [1..turretNumber]
TurretProcess(const turretId_t id) = TurretTemplate(id);           //template TurretProcess with argument id

typedef int[0, NUM_ENEMIES - 1] enemyId_t;                         //bounded integer type with values [1..enemyNumber]
EnemyProcess(const enemyId_t id) = EnemyTemplate(id);              //template EnemyProcess with argument id

//processes that compose the system
//system GameController, MainTower, EnemyProcess;                   //instantiate EnemyProcess(1)..EnemyProcess(enemyNumber) by filling the constant values from enemyId_t range

system GameController, MainTower, TurretProcess, EnemyProcess;    //instantiate TurretProcess(1)..TurretProcess(turretNumber), EnemyProcess(1)..EnemyProcess(enemyNumber) by filling the constant values from turretId_t, enemyId_t range

</system>
	<queries>
		<option key="--hashtable-size" value="32"/>
		<option key="--diagnostic" value="2"/>
		<query>
			<formula>A[] (deadlock imply GameController.Won)</formula>
			<comment>I) The game never reaches a deadlock state.</comment>
			<result outcome="success" type="quality" timestamp="2025-05-01 10:11:53 +0200">
				<option key="--hashtable-size" value="32"/>
				<option key="--diagnostic" value="2"/>
			</result>
		</query>
		<query>
			<formula>A&lt;&gt; forall(i : enemyId_t) isMainTower(EnemyProcess(i).pos)</formula>
			<comment>II) All enemies can reach the Main Tower.</comment>
			<result outcome="success" type="quality" timestamp="2025-05-01 10:11:55 +0200">
				<option key="--hashtable-size" value="32"/>
				<option key="--diagnostic" value="2"/>
			</result>
		</query>
		<query>
			<formula>A[] forall(i : enemyId_t) ((EnemyProcess(i).Moving and EnemyProcess(i).type == CIRCLE) imply ((GameController.gameTimer - enemies[i].spawnTime) &lt;= (25  * CIRCLE_SPEED)))</formula>
			<comment>III) Circles reach the Main Tower in no more than 25 (total path length) * CIRCLE_SPEED time units.</comment>
			<result outcome="success" type="quality" timestamp="2025-05-01 10:11:57 +0200">
				<option key="--hashtable-size" value="32"/>
				<option key="--diagnostic" value="2"/>
			</result>
		</query>
		<query>
			<formula>A[] forall(i : enemyId_t) ((EnemyProcess(i).Moving and EnemyProcess(i).type == SQUARE) imply ((GameController.gameTimer - enemies[i].spawnTime) &lt;= (25  * SQUARE_SPEED)))</formula>
			<comment>IV) Squares reach the Main Tower in no more than 25 (total path length) * SQUARE_SPEED time units.</comment>
			<result outcome="success" type="quality" timestamp="2025-05-01 10:11:59 +0200">
				<option key="--hashtable-size" value="32"/>
				<option key="--diagnostic" value="2"/>
			</result>
		</query>
		<query>
			<formula>A[] forall(i : enemyId_t) isPath(EnemyProcess(i).pos)</formula>
			<comment>V) All enemies never leave the red path.</comment>
			<result outcome="success" type="quality" timestamp="2025-05-01 10:12:01 +0200">
				<option key="--hashtable-size" value="32"/>
				<option key="--diagnostic" value="2"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>A&lt;&gt; GameController.Won</formula>
			<comment/>
			<result outcome="failure" type="quality" timestamp="2025-05-01 10:12:03 +0200">
				<option key="--hashtable-size" value="32"/>
				<option key="--diagnostic" value="2"/>
			</result>
		</query>
		<query>
			<formula>A&lt;&gt; GameController.Lost</formula>
			<comment/>
			<result outcome="failure" type="quality" timestamp="2025-05-01 10:12:04 +0200">
				<option key="--hashtable-size" value="32"/>
				<option key="--diagnostic" value="2"/>
			</result>
		</query>
	</queries>
</nta>
