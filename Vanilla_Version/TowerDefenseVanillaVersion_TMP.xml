<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>/*----------------------------------------------------------------------------------------------------*/
//Constants related to Map of the game
const int MAP_WIDTH = 16;
const int MAP_HEIGHT = 9;

typedef struct {
    int x;
    int y;
} Coordinate;

const Coordinate SPAWN_POS = { 0, 0};
const Coordinate MAIN_TOWER_POS = { 15, 4};

// DO NOT CHANGE THE PATHS ORDER!!!
const int NUM_PATH = 5;
const int MAX_PATH_LEN = 14;
const int PATHS_LEN[NUM_PATH] = { 12, 6, 14, 8, 8 };
const Coordinate PATHS[5][MAX_PATH_LEN] = {
    { {  0, 0 }, {  0, 1 }, {  0, 2 }, {  0, 3 }, {  0, 4 }, {  1, 4 }, {  2,  4 }, {  3,  4 }, {  4,  4 }, {  5,  4 }, {  6,  4 }, {  7,  4 }, { -1, -1 }, { -1, -1 } },
    { {  7, 5 }, {  7, 6 }, {  7, 7 }, {  8, 7 }, {  9, 7 }, { 10, 7 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 } },
    { {  7, 3 }, {  7, 2 }, {  7, 1 }, {  8, 1 }, {  9, 1 }, { 10, 1 }, { 11,  1 }, { 12,  1 }, { 13,  1 }, { 14,  1 }, { 15,  1 }, { 15,  2 }, { 15,  3 }, { 15,  4 } },
    { { 11, 7 }, { 12, 7 }, { 13, 7 }, { 14, 7 }, { 15, 7 }, { 15, 6 }, { 15,  5 }, { 15,  4 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 } },
    { { 10, 6 }, { 10, 5 }, { 10, 4 }, { 11, 4 }, { 12, 4 }, { 13, 4 }, { 14,  4 }, { 15,  4 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 } }
};
//possible path 0-1-3 / 0-1-4 / 0-2

const int TURRETS_POS_LEN = 7;
const Coordinate TURRETS_POS[TURRETS_POS_LEN] = {
    { 2, 3 }, { 5, 5 }, { 8, 2 }, { 8, 6 }, { 11, 5 }, { 14, 2 }, { 14, 6 }
};

/*----------------------------------------------------------------------------------------------------*/
//Constants related to Main Tower
const int MAIN_TOWER_LIFE = 10;


/*----------------------------------------------------------------------------------------------------*/
//Constants related to Enemy
typedef int[0,1] EnemyType; //0 -&gt; Circle, 1 -&gt; Square
const EnemyType CIRCLE = 0;
const EnemyType SQUARE = 1;

const int CIRCLE_SPEED = 1;
const int CIRCLE_HEALTH = 10;
const int CIRCLE_DAMAGE = 2;
const int SQUARE_SPEED = 3;
const int SQUARE_HEALTH = 20;
const int SQUARE_DAMAGE = 4;

const int CIRCLE_SPAWN_TIME = 2;
const int SQUARE_SPAWN_TIME = 3;

typedef struct {
    bool active;
    EnemyType type;
    Coordinate pos;
    int health;
    int spawnTime;  //Time when enemy spawned (for targeting priority)
} Enemy;


/*----------------------------------------------------------------------------------------------------*/
//Constants related to Turret
typedef int[0,2] TurretType; //0-&gt;Basic, 1-&gt;Cannon, 2-&gt;Sniper
const TurretType BASIC = 0;
const TurretType CANNON = 1;
const TurretType SNIPER = 2;

const int BASIC_RANGE = 2;
const int BASIC_FIRE_SPEED = 2;
const int BASIC_DAMAGE = 2;
const int CANNON_RANGE = 1;
const int CANNON_FIRE_SPEED = 7;
const int CANNON_DAMAGE = 5;
const int SNIPER_RANGE = 4;
const int SNIPER_FIRE_SPEED = 20;
const int SNIPER_DAMAGE = 8;

typedef struct {
    bool placed;
    TurretType type;
    Coordinate pos;
    int targetEnemy; //Index of the enemy being targeted, -1 if none
} Turret;


/*----------------------------------------------------------------------------------------------------*/
//Game State Variables
int mainTowerLife = MAIN_TOWER_LIFE;
bool gameOver = false;
bool gameWon = false;

/*----------------------------------------------------------------------------------------------------*/
//Enemy Wave Parameters (VANILLA VERSION)
const int NUM_CIRCLES = 3;
const int NUM_SQUARES = 3;
const int NUM_ENEMIES = NUM_CIRCLES + NUM_SQUARES;

//Turret Wave Parameters (VANILLA VERSION)
const int[0, TURRETS_POS_LEN] NUM_TURRETS = 0;
const TurretType TURRET_TYPES[TURRETS_POS_LEN] = {
    BASIC, BASIC, BASIC, CANNON, CANNON, SNIPER, SNIPER
};
const int[0, TURRETS_POS_LEN-1] TURRET_SELECTED_POS[TURRETS_POS_LEN] = {
    0, 6, 4, 2, 5, 1, 3
};

/*----------------------------------------------------------------------------------------------------*/
//Some channels to allow synchronization
chan turretPositioning[TURRETS_POS_LEN];
chan enemySpawning[NUM_ENEMIES];
chan towerAttacking[EnemyType];
chan gameStart;
//turretCounter is a channel that when a turret is placed, turret will send a syn on channel, 
//Game controller count the number of turret, when all turret is placed he will go to next state
//


Enemy enemies[NUM_ENEMIES];
Turret turrets[TURRETS_POS_LEN];
int enemiesDefeated = 0;
broadcast chan attackTower;
broadcast chan enemyHit[NUM_ENEMIES];

/*----------------------------------------------------------------------------------------------------*/
//Helper Functions

//Calculate Manhattan distance between two points
int distance(Coordinate pos1, Coordinate pos2) {
    return abs(pos1.x - pos2.x) + abs(pos1.y - pos2.y);
}

//Check if an enemy is in a turret's range
bool inRange(Coordinate turretPos, int range, Coordinate enemyPos) {
    return distance(turretPos, enemyPos) &lt;= range;
}


//CHECK IF A MUTEX IS NECESSARY
//Apply damage to an enemy
void applyDamage(int enemyIndex, int damage) {
    enemies[enemyIndex].health -= damage;
}

//Check if a cell is the Main Tower
bool isMainTower(Coordinate pos) {
    return pos.x == MAIN_TOWER_POS.x &amp;&amp; pos.y == MAIN_TOWER_POS.y;
}

//Check if a cell is a Path
bool isPath(Coordinate pos){
    int i, j;

    for(i = 0; i &lt; NUM_PATH; i++){
        for(j = 0; j &lt; PATHS_LEN[i]; j++){
            if(pos.x == PATHS[i][j].x &amp;&amp; pos.y == PATHS[i][j].y) 
                return true;
        }
    }

    return false;        
}


</declaration>
	<template>
		<name x="5" y="5">MainTower</name>
		<location id="id0" x="-476" y="-34">
			<name x="-501" y="-76">Alive</name>
		</location>
		<location id="id1" x="-102" y="-34">
			<name x="-119" y="-76">Hit</name>
			<committed/>
		</location>
		<location id="id2" x="161" y="-34">
			<name x="119" y="-76">Destroyed</name>
		</location>
		<init ref="id0"/>
		<transition id="id3">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-391" y="-17">towerAttacking[SQUARE]?</label>
			<label kind="assignment" x="-416" y="17">mainTowerLife-=SQUARE_DAMAGE</label>
			<nail x="-399" y="8"/>
			<nail x="-178" y="8"/>
		</transition>
		<transition id="id4">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-357" y="60">mainTowerLife&gt;0</label>
			<nail x="-102" y="85"/>
			<nail x="-476" y="85"/>
		</transition>
		<transition id="id5">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-42" y="-59">mainTowerLife&lt;=0</label>
		</transition>
		<transition id="id6">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-391" y="-102">towerAttacking[CIRCLE]?</label>
			<label kind="assignment" x="-416" y="-68">mainTowerLife-=CIRCLE_DAMAGE</label>
			<nail x="-399" y="-76"/>
			<nail x="-178" y="-76"/>
		</transition>
	</template>
	<template>
		<name>GameController</name>
		<declaration>int turretsPlaced = 0;       //Track the number of turrets that have been placed
int circlesSpawned = 0;      //Track the number of circles that have been spawned
int squaresSpawned = 0;      //Track the number of squares that have been spawned
int enemiesSpawned = 0;      //Track the number of enemies that have been spawned (circlesSpawned + squaresSpawned)
int enemiesDefeated = 0;     //Track the number enemies that have been defeated

int timer = 0;               //Ausiliary variable to store the enemy spawnTime

clock gameTimer;             //Track game time
clock spawnTimer;            //Track the enemy spawnTime
clock circleSpawnTimer;      //Track circle spawn time
clock squareSpawnTimer;      //Track square spawn time

void updateTimer(){
    timer++;
    spawnTimer = 0;
}

//Place a turret and setup the related global variables
void placeTurret() {
    turrets[turretsPlaced].placed      = true;
    turrets[turretsPlaced].type        = TURRET_TYPES[turretsPlaced];
    turrets[turretsPlaced].pos         = TURRETS_POS[TURRET_SELECTED_POS[turretsPlaced]];
    turrets[turretsPlaced].targetEnemy = -1;

    turretsPlaced += 1;
}

//Spawn an enemy and setup the related global variables
void spawnEnemy(EnemyType type) {
    enemies[enemiesSpawned].active     = true;
    enemies[enemiesSpawned].type       = type;
    enemies[enemiesSpawned].pos        = SPAWN_POS;
    enemies[enemiesSpawned].spawnTime  = timer;

    if(type == CIRCLE) {
        enemies[enemiesSpawned].health = CIRCLE_HEALTH;

        circlesSpawned += 1;
        circleSpawnTimer = 0;
    }
    else {
        enemies[enemiesSpawned].health = SQUARE_HEALTH;
    
        squaresSpawned += 1;
        squareSpawnTimer = 0;
    }

    enemiesSpawned += 1;
}

</declaration>
		<location id="id7" x="-884" y="-484">
			<name x="-909" y="-527">Start</name>
			<committed/>
		</location>
		<location id="id8" x="187" y="-544">
			<name x="213" y="-552">Won</name>
		</location>
		<location id="id9" x="187" y="-425">
			<name x="213" y="-433">Lost</name>
		</location>
		<location id="id10" x="-272" y="-484">
			<name x="-365" y="-484">Playing</name>
			<label kind="invariant" x="-229" y="-501">(circlesSpawned==NUM_CIRCLES || circleSpawnTimer&lt;=CIRCLE_SPAWN_TIME) &amp;&amp;
(squaresSpawned==NUM_SQUARES || squareSpawnTimer&lt;=SQUARE_SPAWN_TIME) &amp;&amp;
spawnTimer&lt;=1</label>
		</location>
		<location id="id11" x="-697" y="-484">
			<name x="-748" y="-527">Place_Turret</name>
		</location>
		<location id="id12" x="-340" y="-646">
			<name x="-467" y="-663">Spawn_Circle</name>
			<committed/>
		</location>
		<location id="id13" x="-340" y="-323">
			<name x="-467" y="-331">Spawn_Square</name>
			<committed/>
		</location>
		<init ref="id7"/>
		<transition id="id14">
			<source ref="id10"/>
			<target ref="id10"/>
			<label kind="guard" x="-518" y="-569">spawnTimer==1</label>
			<label kind="assignment" x="-518" y="-552">updateTimer()</label>
			<nail x="-399" y="-527"/>
			<nail x="-382" y="-561"/>
		</transition>
		<transition id="id15">
			<source ref="id12"/>
			<target ref="id10"/>
			<nail x="-340" y="-544"/>
		</transition>
		<transition id="id16">
			<source ref="id10"/>
			<target ref="id12"/>
			<label kind="guard" x="-314" y="-731">circlesSpawned&lt;NUM_CIRCLES &amp;&amp;
circleSpawnTimer==CIRCLE_SPAWN_TIME</label>
			<label kind="synchronisation" x="-314" y="-697">enemySpawning[enemiesSpawned]!</label>
			<label kind="assignment" x="-314" y="-680">spawnEnemy(CIRCLE)</label>
			<nail x="-221" y="-586"/>
			<nail x="-221" y="-646"/>
		</transition>
		<transition id="id17">
			<source ref="id13"/>
			<target ref="id10"/>
			<nail x="-340" y="-365"/>
			<nail x="-340" y="-425"/>
		</transition>
		<transition id="id18">
			<source ref="id10"/>
			<target ref="id13"/>
			<label kind="guard" x="-314" y="-314">squaresSpawned&lt;NUM_SQUARES &amp;&amp;
squareSpawnTimer==SQUARE_SPAWN_TIME</label>
			<label kind="synchronisation" x="-314" y="-280">enemySpawning[enemiesSpawned]!</label>
			<label kind="assignment" x="-314" y="-263">spawnEnemy(SQUARE)</label>
			<nail x="-221" y="-382"/>
			<nail x="-221" y="-323"/>
		</transition>
		<transition id="id19">
			<source ref="id11"/>
			<target ref="id11"/>
			<label kind="guard" x="-807" y="-374">turretsPlaced&lt;NUM_TURRETS</label>
			<label kind="synchronisation" x="-833" y="-357">turretPositioning[turretsPlaced]!</label>
			<label kind="assignment" x="-756" y="-340">placeTurret()</label>
			<nail x="-637" y="-382"/>
			<nail x="-756" y="-382"/>
		</transition>
		<transition id="id20">
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="guard" x="-612" y="-510">turretsPlaced==NUM_TURRETS</label>
			<label kind="assignment" x="-569" y="-476">gameTimer=0,
circleSpawnTimer=0,
squareSpawnTimer=0</label>
		</transition>
		<transition id="id21">
			<source ref="id7"/>
			<target ref="id11"/>
		</transition>
		<transition id="id22">
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="guard" x="-59" y="-450">mainTowerLife&lt;=0</label>
			<label kind="assignment" x="-42" y="-416">gameOver=true</label>
			<nail x="-144" y="-425"/>
		</transition>
		<transition id="id23">
			<source ref="id10"/>
			<target ref="id8"/>
			<label kind="guard" x="-127" y="-595">enemiesDefeated==NUM_ENEMIES &amp;&amp;
mainTowerLife&gt;0</label>
			<label kind="assignment" x="-42" y="-535">gameWon=true</label>
			<nail x="-144" y="-544"/>
		</transition>
	</template>
	<template>
		<name>TurretTemplate</name>
		<parameter>int turretId</parameter>
		<declaration>int fireRate;            //How fast turret instance can fire
int damage;              //Damage dealt by turret instance
int range;               //Attack range of turret instance
clock fireTimer;         //Timer for tracking reload time
int targetEnemy = -1;    //ID of the enemy being targeted(-1 means no target)

//Set turret instance stats based on type of turret
void setTurretStats() {
    if (turrets[turretId].type == BASIC) {
        fireRate = BASIC_FIRE_SPEED;
        damage = BASIC_DAMAGE;
        range = BASIC_RANGE;
    } else if (turrets[turretId].type == CANNON) {
        fireRate = CANNON_FIRE_SPEED;
        damage = CANNON_DAMAGE;
        range = CANNON_RANGE;
    } else {
        fireRate = SNIPER_FIRE_SPEED;
        damage = SNIPER_DAMAGE;
        range = SNIPER_RANGE;
    }
}

//Find the best target for a turret
void findTarget() {
    Coordinate turretPos = turrets[turretId].pos;
    int bestTarget = -1;
    int minDistance = MAP_WIDTH + MAP_HEIGHT; //Initialize with a large value
    int maxSpawnTime = -1; //For enemies at same distance
    int i;

    for ( i = 0; i &lt; NUM_ENEMIES; i++) {
        if (enemies[i].active &amp;&amp; enemies[i].health &gt; 0 &amp;&amp; inRange(turretPos, range, enemies[i].pos)) {
            int d = distance(turretPos, enemies[i].pos);
            if ( d &lt; minDistance || 
                (d == minDistance &amp;&amp; enemies[i].spawnTime &gt; maxSpawnTime) || 
                (d == minDistance &amp;&amp; enemies[i].spawnTime == maxSpawnTime &amp;&amp; enemies[i].type == SQUARE)
               ) {
                minDistance = d;
                maxSpawnTime = enemies[i].spawnTime;
                bestTarget = i;
            }
        }
    }
     
    targetEnemy = bestTarget;
}
</declaration>
		<location id="id24" x="-680" y="0">
			<name x="-731" y="-42">Not_Placed</name>
		</location>
		<location id="id25" x="-348" y="0">
			<name x="-323" y="-34">Idle</name>
		</location>
		<location id="id26" x="85" y="0">
			<name x="59" y="-42">Firing</name>
			<committed/>
		</location>
		<location id="id27" x="85" y="144">
			<name x="42" y="161">Reloading</name>
		</location>
		<init ref="id24"/>
		<transition id="id28">
			<source ref="id25"/>
			<target ref="id25"/>
			<label kind="guard" x="-408" y="-119">targetEnemy==-1</label>
			<label kind="assignment" x="-399" y="-102">findTarget()</label>
			<nail x="-306" y="-76"/>
			<nail x="-382" y="-76"/>
		</transition>
		<transition id="id29">
			<source ref="id24"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="-629" y="-25">turretPositioning[turretId]?</label>
			<label kind="assignment" x="-586" y="8">setTurretStats()</label>
		</transition>
		<transition id="id30">
			<source ref="id27"/>
			<target ref="id25"/>
			<label kind="guard" x="-221" y="119">fireTimer==fireRate</label>
			<label kind="assignment" x="-204" y="153">targetEnemy=-1</label>
			<nail x="-348" y="144"/>
		</transition>
		<transition id="id31">
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="assignment" x="93" y="59">fireTimer=0</label>
		</transition>
		<transition id="id32">
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="guard" x="-204" y="-25">targetEnemy!=-1</label>
			<label kind="synchronisation" x="-229" y="8">enemyHit[targetEnemy]!</label>
			<label kind="assignment" x="-280" y="25">applyDamage(targetEnemy, damage)</label>
			<label kind="comments" x="-238" y="-51">Committed + Check Range</label>
		</transition>
	</template>
	<template>
		<name>EnemyTemplate</name>
		<parameter>int enemyId</parameter>
		<declaration>int speed;               //Movement speed of the enemy instance
int health;              //Current health of the enemy instance
int damage;              //Damage enemy instance deals to the tower

//bool canMove = false;    //Flag to control movement
Coordinate pos;          //Current { X, Y } position
clock moveTimer;         //Timer for controlling movement speed

int damageReceived;      //Damage Received by the enemy instance to the main tower

int[0,4] currentPath;    //0-&gt;PATH_1, 1-&gt;PATH_1_1, 2-&gt;PATH_1_2, 3-&gt;PATH_1_1_1, 4-&gt;PATH_1_1_2
int posIdx;              //Position in the path

//Initialize enemy instance based on its type
void initEnemy() {
    if (enemies[enemyId].type == CIRCLE) {
        speed = CIRCLE_SPEED;
        health = CIRCLE_HEALTH;
        damage = CIRCLE_DAMAGE;
    } else {
        speed = SQUARE_SPEED;
        health = SQUARE_HEALTH;
        damage = SQUARE_DAMAGE;
    }

    pos = SPAWN_POS;
    enemies[enemyId].pos = SPAWN_POS;

    currentPath = 0;
    posIdx = 0;    

    moveTimer = 0;
}

//Move the enemy to the next cell selecting a random path when needed
void move(int i) {
    if(posIdx &lt; PATHS_LEN[currentPath] - 1){
        posIdx++;
    }
    else if(!isMainTower(pos)){
        currentPath = 2 * (currentPath + 1) - i; //Binary trees formula based on the order of the children
        posIdx = 0;
    }

    pos = PATHS[currentPath][posIdx];
    enemies[enemyId].pos = PATHS[currentPath][posIdx];
}

//Update the local health variable to the global one
void receiveDamage() {
    health = enemies[enemyId].health;
}</declaration>
		<location id="id33" x="-1054" y="-493">
			<name x="-1105" y="-535">Not_Spawned</name>
		</location>
		<location id="id34" x="-731" y="-493">
			<name x="-757" y="-535">Waiting</name>
		</location>
		<location id="id35" x="-442" y="-493">
			<name x="-468" y="-535">Moving</name>
		</location>
		<location id="id36" x="-68" y="-493">
			<name x="-111" y="-535">Attacking</name>
		</location>
		<location id="id37" x="-281" y="-280">
			<name x="-298" y="-323">Dead</name>
		</location>
		<location id="id38" x="255" y="-493">
			<name x="221" y="-535">Left_Map</name>
		</location>
		<location id="id39" x="-731" y="-280">
			<name x="-748" y="-255">Hit</name>
			<committed/>
		</location>
		<init ref="id33"/>
		<transition id="id40">
			<source ref="id36"/>
			<target ref="id39"/>
			<label kind="synchronisation" x="-391" y="-408">enemyHit[enemyId]?</label>
			<label kind="assignment" x="-374" y="-374">receiveDamage()</label>
			<nail x="-68" y="-382"/>
			<nail x="-561" y="-382"/>
		</transition>
		<transition id="id41">
			<source ref="id39"/>
			<target ref="id37"/>
			<label kind="guard" x="-553" y="-306">health&lt;=0</label>
			<label kind="assignment" x="-638" y="-272">enemies[enemyId].active=false,
enemiesDefeated++</label>
		</transition>
		<transition id="id42">
			<source ref="id39"/>
			<target ref="id34"/>
			<label kind="guard" x="-689" y="-391">health&gt;0</label>
			<nail x="-697" y="-348"/>
			<nail x="-697" y="-425"/>
		</transition>
		<transition id="id43">
			<source ref="id34"/>
			<target ref="id39"/>
			<label kind="synchronisation" x="-927" y="-399">enemyHit[enemyId]?</label>
			<label kind="assignment" x="-918" y="-382">receiveDamage()</label>
			<nail x="-765" y="-425"/>
			<nail x="-765" y="-348"/>
		</transition>
		<transition id="id44">
			<source ref="id36"/>
			<target ref="id38"/>
			<label kind="guard" x="17" y="-518">moveTimer&gt;=speed</label>
			<label kind="assignment" x="-34" y="-493">enemies[enemyId].active=false</label>
		</transition>
		<transition id="id45">
			<source ref="id35"/>
			<target ref="id34"/>
			<label kind="guard" x="-663" y="-467">!isMainTower(pos)</label>
			<label kind="assignment" x="-646" y="-450">moveTimer = 0</label>
			<nail x="-535" y="-467"/>
			<nail x="-646" y="-467"/>
		</transition>
		<transition id="id46">
			<source ref="id35"/>
			<target ref="id36"/>
			<label kind="guard" x="-349" y="-518">isMainTower(pos)</label>
			<label kind="synchronisation" x="-434" y="-484">towerAttacking[enemies[enemyId].type]!</label>
		</transition>
		<transition id="id47">
			<source ref="id34"/>
			<target ref="id35"/>
			<label kind="select" x="-646" y="-569">i : int[0,1]</label>
			<label kind="guard" x="-663" y="-586">moveTimer&gt;=speed</label>
			<label kind="assignment" x="-620" y="-552">move(i)</label>
			<nail x="-646" y="-527"/>
			<nail x="-535" y="-527"/>
		</transition>
		<transition id="id48">
			<source ref="id33"/>
			<target ref="id34"/>
			<label kind="synchronisation" x="-994" y="-518">enemySpawning[enemyId]?</label>
			<label kind="assignment" x="-943" y="-484">initEnemy()</label>
		</transition>
	</template>
	<system>gameController = GameController();
mainTower = MainTower();

typedef int[0, (NUM_TURRETS - 1) &gt;? 0] turretId_t;                       //bounded integer type with values [1..turretNumber]
TurretProcess(const turretId_t id) = TurretTemplate(id);          //template TurretProcess with argument id

typedef int[0, NUM_ENEMIES - 1] enemyId_t;                        //bounded integer type with values [1..enemyNumber]
EnemyProcess(const enemyId_t id) = EnemyTemplate(id);             //template EnemyProcess with argument id

//processes that compose the system
system gameController, mainTower, EnemyProcess;    //instantiate TurretProcess(1)..TurretProcess(turretNumber), EnemyProcess(1)..EnemyProcess(enemyNumber) by filling the constant values from turretId_t, enemyId_t range

</system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>The system never reaches a deadlock state</comment>
			<result outcome="failure" type="quality" timestamp="2025-04-25 11:42:16 +0200">
				<option key="--diagnostic" value="2"/>
			</result>
		</query>
		<query>
			<formula>A&lt;&gt; forall(i : enemyId_t) (EnemyProcess(i).Left_Map or EnemyProcess(i).Dead)</formula>
			<comment>Eventually, all enemies either attack the Main Tower or leave the map</comment>
			<result outcome="failure" type="quality" timestamp="2025-04-25 13:15:53 +0200">
				<option key="--diagnostic" value="2"/>
			</result>
		</query>
		<query>
			<formula>A[] forall(i : enemyId_t) ((enemies[i].type == CIRCLE and isMainTower(enemies[i].pos)) imply ((gameController.timer - enemies[i].spawnTime) &lt;= (26  * CIRCLE_SPEED)))</formula>
			<comment>All Circles reach the tower or exit within 26 (total path length) * CIRCLE_SPEED time units</comment>
		</query>
		<query>
			<formula>A[] forall(i : enemyId_t) ((enemies[i].type == SQUARE and isMainTower(enemies[i].pos)) imply ((gameController.timer - enemies[i].spawnTime) &lt;= (26  * SQUARE_SPEED)))</formula>
			<comment>All Squares reach the tower or exit within 26 (total path length) * SQUARE_SPEED time units</comment>
		</query>
		<query>
			<formula>A[] forall(i : enemyId_t) isPath(enemies[i].pos) or isMainTower(enemies[i].pos)</formula>
			<comment>Enemies are always either on a path or at the Main Tower</comment>
			<result outcome="success" type="quality" timestamp="2025-04-25 00:13:57 +0200">
				<option key="--diagnostic" value="2"/>
			</result>
		</query>
	</queries>
</nta>
