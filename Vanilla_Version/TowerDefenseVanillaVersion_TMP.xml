<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>/*----------------------------------------------------------------------------------------------------*/
//Constants related to Map of the game
const int MAP_WIDTH = 16;
const int MAP_HEIGHT = 9;

typedef struct {
    int x;
    int y;
} Coordinate;

const Coordinate SPAWN_POS = { 0, 0};
const Coordinate MAIN_TOWER_POS = { 15, 4};

// DO NOT CHANGE THE PATHS ORDER!!!
const int MAX_PATH_LEN = 14;
const int PATHS_LEN[5] = { 12, 6, 14, 8, 8 };
const Coordinate PATHS[5][MAX_PATH_LEN] = {
    { {  0, 0 }, {  0, 1 }, {  0, 2 }, {  0, 3 }, {  0, 4 }, {  1, 4 }, {  2,  4 }, {  3,  4 }, {  4,  4 }, {  5,  4 }, {  6,  4 }, {  7,  4 }, { -1, -1 }, { -1, -1 } },
    { {  7, 5 }, {  7, 6 }, {  7, 7 }, {  8, 7 }, {  9, 7 }, { 10, 7 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 } },
    { {  7, 3 }, {  7, 2 }, {  7, 1 }, {  8, 1 }, {  9, 1 }, { 10, 1 }, { 11,  1 }, { 12,  1 }, { 13,  1 }, { 14,  1 }, { 15,  1 }, { 15,  2 }, { 15,  3 }, { 15,  4 } },
    { { 11, 7 }, { 12, 7 }, { 13, 7 }, { 14, 7 }, { 15, 7 }, { 15, 6 }, { 15,  5 }, { 15,  4 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 } },
    { { 10, 6 }, { 10, 5 }, { 10, 4 }, { 11, 4 }, { 12, 4 }, { 13, 4 }, { 14,  4 }, { 15,  4 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 } }
};
//possible path 0-1-3 / 0-1-4 / 0-2

const int TURRETS_POS_LEN = 7;
const Coordinate TURRETS_POS[TURRETS_POS_LEN] = {
    { 2, 3 }, { 5, 5 }, { 8, 2 }, { 8, 6 }, { 11, 5 }, { 14, 2 }, { 14, 6 }
};

/*----------------------------------------------------------------------------------------------------*/
//Constants related to Main Tower
const int MAIN_TOWER_LIFE = 10;


/*----------------------------------------------------------------------------------------------------*/
//Constants related to Enemy
typedef int[0,1] EnemyType; //0 -&gt; Circle, 1 -&gt; Square
const EnemyType CIRCLE = 0;
const EnemyType SQUARE = 1;

const int CIRCLE_SPEED = 1;
const int CIRCLE_HEALTH = 10;
const int CIRCLE_DAMAGE = 2;
const int SQUARE_SPEED = 3;
const int SQUARE_HEALTH = 20;
const int SQUARE_DAMAGE = 4;

const int CIRCLE_SPAWN_TIME = 2;
const int SQUARE_SPAWN_TIME = 3;

typedef struct {
    bool active;
    EnemyType type;
    int x;
    int y;
    int health;
    int spawnTime;  //Time when enemy spawned (for targeting priority)
} Enemy;


/*----------------------------------------------------------------------------------------------------*/
//Constants related to Turret
typedef int[0,2] TurretType; //0-&gt;Basic, 1-&gt;Cannon, 2-&gt;Sniper
const TurretType BASIC = 0;
const TurretType CANNON = 1;
const TurretType SNIPER = 2;

const int BASIC_RANGE = 2;
const int BASIC_FIRE_SPEED = 2;
const int BASIC_DAMAGE = 2;
const int CANNON_RANGE = 1;
const int CANNON_FIRE_SPEED = 7;
const int CANNON_DAMAGE = 5;
const int SNIPER_RANGE = 4;
const int SNIPER_FIRE_SPEED = 20;
const int SNIPER_DAMAGE = 8;

typedef struct {
    bool placed;
    TurretType type;
    int x;
    int y;
    int targetEnemy; //Index of the enemy being targeted, -1 if none
} Turret;


/*----------------------------------------------------------------------------------------------------*/
//Game State Variables
int mainTowerLife = MAIN_TOWER_LIFE;
bool gameOver = false;
bool gameWon = false;

//Enemy Wave Parameters (VANILLA VERSION)
const int NUM_CIRCLES = 3;
const int NUM_SQUARES = 3;
const int NUM_ENEMIES = NUM_CIRCLES + NUM_SQUARES;

//Turret Wave Parameters (VANILLA VERSION)
const int[0, TURRETS_POS_LEN] NUM_TURRETS = 7;
const TurretType TURRET_TYPES[NUM_TURRETS] = {
    BASIC, BASIC, BASIC, CANNON, CANNON, SNIPER, SNIPER
};
const int[0, TURRETS_POS_LEN-1] TURRET_SELECTED_POS[NUM_TURRETS] = {
    0, 6, 4, 2, 5, 1, 3
};

//Some channels to allow synchronization
chan turretPositioning[NUM_TURRETS];
chan enemySpawning[NUM_ENEMIES];
chan damage[EnemyType];
chan gameStart;
//turretCounter is a channel that when a turret is placed, turret will send a syn on channel, 
//Game controller count the number of turret, when all turret is placed he will go to next state
//


Enemy enemies[NUM_ENEMIES];
Turret turrets[NUM_TURRETS];
int enemiesDefeated = 0;
broadcast chan attackTower;
broadcast chan enemyHit[NUM_ENEMIES];

/*----------------------------------------------------------------------------------------------------*/
//Helper Functions

//Calculate Manhattan distance between two points
int distance(int x1, int y1, int x2, int y2) {
    return abs(x1 - x2) + abs(y1 - y2);
}

//Check if an enemy is in a turret's range
bool inRange(int turretX, int turretY, int range, int enemyX, int enemyY) {
    return distance(turretX, turretY, enemyX, enemyY) &lt;= range;
}

//Apply damage to an enemy
void applyDamage(int enemyIndex, int damage) {
    enemies[enemyIndex].health -= damage;
}

//Check if a cell is the Main Tower
bool isMainTower(int x, int y) {
    return x == MAIN_TOWER_POS.x &amp;&amp; y == MAIN_TOWER_POS.y;
}

</declaration>
	<template>
		<name x="5" y="5">MainTower</name>
		<location id="id0" x="-476" y="-34">
			<name x="-501" y="-76">Alive</name>
		</location>
		<location id="id1" x="-102" y="-34">
			<name x="-110" y="-76">Hit</name>
			<committed/>
		</location>
		<location id="id2" x="136" y="-34">
			<name x="119" y="-76">Dead</name>
		</location>
		<init ref="id0"/>
		<transition id="id3">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-348" y="-17">damage[SQUARE]?</label>
			<label kind="assignment" x="-408" y="17">mainTowerLife-=SQUARE_DAMAGE</label>
			<nail x="-399" y="8"/>
			<nail x="-178" y="8"/>
		</transition>
		<transition id="id4">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-357" y="60">mainTowerLife&gt;0</label>
			<nail x="-102" y="85"/>
			<nail x="-476" y="85"/>
		</transition>
		<transition id="id5">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-51" y="-59">mainTowerLife&lt;=0</label>
		</transition>
		<transition id="id6">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-348" y="-102">damage[CIRCLE]?</label>
			<label kind="assignment" x="-416" y="-68">mainTowerLife-=CIRCLE_DAMAGE</label>
			<nail x="-399" y="-76"/>
			<nail x="-178" y="-76"/>
		</transition>
	</template>
	<template>
		<name>GameController</name>
		<declaration>int turretsPlaced = 0;       //Track the number of turrets that have been placed
int circlesSpawned = 0;      //Track the number of circles that have been spawned
int squaresSpawned = 0;      //Track the number of squares that have been spawned
int enemiesDefeated = 0;     //Track the number enemies that have been defeated

clock gameTimer;             //Track game time
clock circleSpawnTimer;      //Track circle spawn time
clock squareSpawnTimer;      //Track square spawn time


//Place a turret and setup the related global variables
void placeTurret() {
    turrets[turretsPlaced].placed      = true;
    turrets[turretsPlaced].type        = TURRET_TYPES[turretsPlaced];
    turrets[turretsPlaced].x           = TURRETS_POS[TURRET_SELECTED_POS[turretsPlaced]].x;
    turrets[turretsPlaced].y           = TURRETS_POS[TURRET_SELECTED_POS[turretsPlaced]].y;
    turrets[turretsPlaced].targetEnemy = -1;

    turretsPlaced = turretsPlaced + 1;
}

</declaration>
		<location id="id7" x="-901" y="0">
			<name x="-926" y="-42">Start</name>
			<committed/>
		</location>
		<location id="id8" x="170" y="-59">
			<name x="196" y="-68">Won</name>
		</location>
		<location id="id9" x="170" y="59">
			<name x="196" y="51">Lost</name>
		</location>
		<location id="id10" x="-289" y="0">
			<name x="-263" y="-8">Spawn_Enemies</name>
		</location>
		<location id="id11" x="-714" y="0">
			<name x="-765" y="-42">Place_Turret</name>
		</location>
		<init ref="id7"/>
		<transition id="id12">
			<source ref="id10"/>
			<target ref="id10"/>
			<label kind="guard" x="-433" y="-212">circlesSpawned&lt;NUM_CIRCLES &amp;&amp;
circleSpawnTimer&gt;CIRCLE_SPAWN_TIME</label>
			<label kind="synchronisation" x="-484" y="-170">enemySpawning[circlesSpawned+squaresSpawned]!</label>
			<label kind="assignment" x="-365" y="-153">circlesSpawned+=1,
circleSpawnTimer=0</label>
			<nail x="-229" y="-102"/>
			<nail x="-348" y="-102"/>
		</transition>
		<transition id="id13">
			<source ref="id10"/>
			<target ref="id10"/>
			<label kind="guard" x="-433" y="110">squaresSpawned&lt;NUM_SQUARES &amp;&amp;
squareSpawnTimer&gt;SQUARE_SPAWN_TIME</label>
			<label kind="synchronisation" x="-484" y="144">enemySpawning[circlesSpawned+squaresSpawned]!</label>
			<label kind="assignment" x="-365" y="161">squaresSpawned+=1,
squareSpawnTimer=0</label>
			<nail x="-229" y="102"/>
			<nail x="-348" y="102"/>
		</transition>
		<transition id="id14">
			<source ref="id11"/>
			<target ref="id11"/>
			<label kind="guard" x="-825" y="110">turretsPlaced&lt;NUM_TURRETS</label>
			<label kind="synchronisation" x="-850" y="127">turretPositioning[turretsPlaced]!</label>
			<label kind="assignment" x="-774" y="144">placeTurret()</label>
			<nail x="-655" y="102"/>
			<nail x="-774" y="102"/>
		</transition>
		<transition id="id15">
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="guard" x="-603" y="-25">turretsPlaced==NUM_TURRETS</label>
			<label kind="assignment" x="-569" y="8">gameTimer=0,
circleSpawnTimer=0,
squareSpawnTimer=0</label>
		</transition>
		<transition id="id16">
			<source ref="id7"/>
			<target ref="id11"/>
		</transition>
		<transition id="id17">
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="guard" x="-76" y="34">mainTowerLife&lt;=0</label>
			<label kind="assignment" x="-59" y="68">gameOver=true</label>
			<nail x="-161" y="59"/>
		</transition>
		<transition id="id18">
			<source ref="id10"/>
			<target ref="id8"/>
			<label kind="guard" x="-153" y="-110">enemiesDefeated&gt;=NUM_ENEMIES &amp;&amp;
mainTowerLife&gt;0</label>
			<label kind="assignment" x="-59" y="-51">gameWon=true</label>
			<nail x="-161" y="-59"/>
		</transition>
	</template>
	<template>
		<name>TurretTemplate</name>
		<parameter>int turretId</parameter>
		<declaration>int fireRate;            //How fast turret instance can fire
int damage;              //Damage dealt by turret instance
int range;               //Attack range of turret instance
clock fireTimer;         //Timer for tracking reload time
int targetEnemy = -1;    //ID of the enemy being targeted(-1 means no target)


//Set turret instance stats based on type of turret
void setTurretStats() {
    if (turrets[turretId].type == BASIC) {
        fireRate = BASIC_FIRE_SPEED;
        damage = BASIC_DAMAGE;
        range = BASIC_RANGE;
    } else if (turrets[turretId].type == CANNON) {
        fireRate = CANNON_FIRE_SPEED;
        damage = CANNON_DAMAGE;
        range = CANNON_RANGE;
    } else {
        fireRate = SNIPER_FIRE_SPEED;
        damage = SNIPER_DAMAGE;
        range = SNIPER_RANGE;
    }
}

//Find the best target for a turret
int findTarget(int turretIndex) {
    int tx = turrets[turretIndex].x;
    int ty = turrets[turretIndex].y;
    int bestTarget = -1;
    int minDistance = MAP_WIDTH + MAP_HEIGHT; //Initialize with a large value
    int earliestSpawn = -1; //For enemies at same distance
    int i;

    for ( i = 0; i &lt; NUM_ENEMIES; i++) {
        if (enemies[i].active &amp;&amp; enemies[i].health &gt; 0 &amp;&amp; inRange(tx, ty, range, enemies[i].x, enemies[i].y)) {
            int d = distance(tx, ty, enemies[i].x, enemies[i].y);
            if ( d &lt; minDistance || 
                (d == minDistance &amp;&amp; enemies[i].spawnTime &gt; earliestSpawn) || 
                (d == minDistance &amp;&amp; enemies[i].spawnTime == earliestSpawn &amp;&amp; enemies[i].type == SQUARE)
               ) {
                minDistance = d;
                earliestSpawn = enemies[i].spawnTime;
                bestTarget = i;
            }
        }
    }
     
    return bestTarget;
}
</declaration>
		<location id="id19" x="-680" y="0">
			<name x="-722" y="-42">Not_Placed</name>
			<committed/>
		</location>
		<location id="id20" x="-348" y="0">
			<name x="-365" y="-42">Idle</name>
		</location>
		<location id="id21" x="85" y="0">
			<name x="59" y="-42">Firing</name>
			<committed/>
		</location>
		<location id="id22" x="85" y="170">
			<name x="59" y="195">Reload</name>
		</location>
		<init ref="id19"/>
		<transition id="id23">
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-629" y="-25">turretPositioning[turretId]?</label>
			<label kind="assignment" x="-586" y="8">setTurretStats()</label>
		</transition>
		<transition id="id24">
			<source ref="id22"/>
			<target ref="id20"/>
			<label kind="guard" x="-229" y="144">fireTimer&gt;=fireRate</label>
			<label kind="assignment" x="-212" y="178">targetEnemy=-1</label>
			<nail x="-348" y="170"/>
		</transition>
		<transition id="id25">
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="guard" x="119" y="59">fireTimer&gt;=fireRate &amp;&amp; targetEnemy&gt;=0</label>
			<label kind="assignment" x="119" y="76">fireTimer=0,
targetEnemy=findTarget(turretId)</label>
			<nail x="110" y="119"/>
			<nail x="110" y="51"/>
		</transition>
		<transition id="id26">
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="guard" x="-272" y="51">fireTimer &gt;= fireRate &amp;&amp; targetEnemy &gt;= 0 
&amp;&amp; enemies[targetEnemy].health &gt; 0</label>
			<label kind="synchronisation" x="-187" y="85">enemyHit[targetEnemy]!</label>
			<label kind="assignment" x="-221" y="102">applyDamage(targetEnemy, damage)</label>
			<nail x="59" y="51"/>
			<nail x="59" y="119"/>
		</transition>
		<transition id="id27">
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="guard" x="-204" y="-25">targetEnemy&gt;=0</label>
			<label kind="assignment" x="-280" y="8">targetEnemy=findTarget(turretId)</label>
			<label kind="comments" x="-238" y="-51">Committed + Check Range</label>
		</transition>
	</template>
	<template>
		<name>EnemyTemplate</name>
		<parameter>int enemyId</parameter>
		<declaration>int speed;               //Movement speed of the enemy instance
int health;              //Current health of the enemy instance
int damage;              //Damage enemy instance deals to the tower

bool canMove = false;    //Flag to control movement
int x;                   //Current X position
int y;                   //Current Y position
clock moveTimer;         //Timer for controlling movement speed

int damageReceived;      //Damage Received by the enemy instance to the main tower

int[0,4] currentPath;    //0-&gt;PATH_1, 1-&gt;PATH_1_1, 2-&gt;PATH_1_2, 3-&gt;PATH_1_1_1, 4-&gt;PATH_1_1_2
int posIdx;              //Position in the path

//Initialize enemy instance based on its type
void initEnemy() {
    currentPath = 0;
    posIdx = 0;

    x = SPAWN_POS.x;
    y = SPAWN_POS.y;
    enemies[enemyId].x = SPAWN_POS.x;
    enemies[enemyId].y = SPAWN_POS.y;
    
    if (enemies[enemyId].type == CIRCLE) {
        health = CIRCLE_HEALTH;
        speed = CIRCLE_SPEED;
        damage = CIRCLE_DAMAGE;
    } else {
        health = SQUARE_HEALTH;
        speed = SQUARE_SPEED;
        damage = SQUARE_DAMAGE;
    }
}

//Move the enemy to the next cell selecting a random path when needed
void move(int i) {
    if(posIdx &lt; PATHS_LEN[currentPath] - 1){
        posIdx++;
    }
    else{
        currentPath = 2 * (currentPath + 1) - i; //Binary trees formula based on the order of the children
        posIdx = 0;
    }

    x = PATHS[currentPath][posIdx].x;
    y = PATHS[currentPath][posIdx].y;
    enemies[enemyId].x = PATHS[currentPath][posIdx].x;
    enemies[enemyId].y = PATHS[currentPath][posIdx].y;
}</declaration>
		<location id="id28" x="-1028" y="-493">
			<name x="-1079" y="-527">Not_Spawned</name>
			<committed/>
		</location>
		<location id="id29" x="-722" y="-493">
			<name x="-790" y="-527">Waiting</name>
		</location>
		<location id="id30" x="-450" y="-493">
			<name x="-442" y="-527">Moving</name>
		</location>
		<location id="id31" x="-144" y="-493">
			<name x="-178" y="-527">Attacking</name>
		</location>
		<location id="id32" x="-586" y="-663">
			<name x="-603" y="-697">Dead</name>
			<committed/>
		</location>
		<location id="id33" x="195" y="-493">
			<name x="161" y="-527">Left_Map</name>
			<committed/>
		</location>
		<location id="id34" x="-586" y="-289">
			<name x="-594" y="-272">Hit</name>
			<committed/>
		</location>
		<init ref="id28"/>
		<transition id="id35">
			<source ref="id29"/>
			<target ref="id32"/>
			<label kind="guard" x="-986" y="-629">health&lt;=0</label>
			<label kind="assignment" x="-986" y="-612">enemies[enemyId].active=false,
enemiesDefeated++</label>
			<nail x="-722" y="-663"/>
		</transition>
		<transition id="id36">
			<source ref="id34"/>
			<target ref="id30"/>
			<label kind="guard" x="-441" y="-306">health&gt;0 &amp;&amp; canMove</label>
			<label kind="assignment" x="-416" y="-289">moveTimer=0</label>
			<nail x="-450" y="-289"/>
		</transition>
		<transition id="id37">
			<source ref="id30"/>
			<target ref="id34"/>
			<label kind="synchronisation" x="-501" y="-416">enemyHit[enemyId]?</label>
		</transition>
		<transition id="id38">
			<source ref="id34"/>
			<target ref="id29"/>
			<label kind="guard" x="-705" y="-289">health&gt;0</label>
			<nail x="-722" y="-289"/>
		</transition>
		<transition id="id39">
			<source ref="id29"/>
			<target ref="id34"/>
			<label kind="synchronisation" x="-816" y="-416">enemyHit[enemyId]?</label>
		</transition>
		<transition id="id40">
			<source ref="id30"/>
			<target ref="id32"/>
			<label kind="guard" x="-442" y="-629">health&lt;=0</label>
			<label kind="assignment" x="-442" y="-612">enemies[enemyId].active=false,
enemiesDefeated++</label>
			<nail x="-450" y="-663"/>
		</transition>
		<transition id="id41">
			<source ref="id31"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="-25" y="-518">attackTower!</label>
			<label kind="assignment" x="-59" y="-484">mainTowerLife-=damage,
damageReceived=damage</label>
		</transition>
		<transition id="id42">
			<source ref="id30"/>
			<target ref="id29"/>
			<label kind="guard" x="-629" y="-450">!canMove</label>
			<nail x="-535" y="-450"/>
			<nail x="-646" y="-450"/>
		</transition>
		<transition id="id43">
			<source ref="id30"/>
			<target ref="id31"/>
			<label kind="guard" x="-365" y="-518">isMainTower(x,y)</label>
		</transition>
		<transition id="id44">
			<source ref="id29"/>
			<target ref="id30"/>
			<label kind="select" x="-637" y="-578">i : int[0,1]</label>
			<label kind="guard" x="-697" y="-561">moveTimer&gt;=speed &amp;&amp; canMove</label>
			<label kind="assignment" x="-637" y="-527">moveTimer=0,
move(i)</label>
			<nail x="-646" y="-535"/>
			<nail x="-535" y="-535"/>
		</transition>
		<transition id="id45">
			<source ref="id28"/>
			<target ref="id29"/>
			<label kind="guard" x="-977" y="-518">enemies[enemyId].active</label>
			<label kind="assignment" x="-935" y="-484">initEnemy(),
moveTimer=0</label>
		</transition>
	</template>
	<system>gameController = GameController();
mainTower = MainTower();

typedef int[0, NUM_TURRETS-1] turretId_t;       //bounded integer type with values [1..turretNumber]
T(const turretId_t id) = TurretTemplate(id);    //template T with argument id


typedef int[0, NUM_ENEMIES-1] enemyId_t;        //bounded integer type with values [1..enemyNumber]
E(const enemyId_t id) = EnemyTemplate(id);      //template E with argument id

//processes that compose the system
system gameController, mainTower, T, E;         //instantiate T(1)..T(turretNumber),EB(1)..E(enemyNumber) by filling the constant values from turretId_t, enemyId_t range

</system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>The system never reaches a deadlock state</comment>
			<result outcome="failure" type="quality" timestamp="2025-04-24 03:51:52 +0200">
			</result>
		</query>
		<query>
			<formula>A&lt;&gt; forall (i : enemyId_t) (E(i).Attacking or E(i).Left_Map)</formula>
			<comment>Eventually, all enemies either attack the Main Tower or leave the map</comment>
			<result outcome="failure" type="quality" timestamp="2025-04-24 03:51:52 +0200">
			</result>
		</query>
		<query>
			<formula>A[] forall(i : enemyId_t) (enemies[i].type == CIRCLE imply (E(i).Attacking or E(i).Left_Map) imply E(i).moveTimer &lt;= 14)</formula>
			<comment>All Circles reach the tower or exit within 14 time units</comment>
			<result outcome="success" type="quality" timestamp="2025-04-24 03:51:52 +0200">
			</result>
		</query>
		<query>
			<formula>A[] forall(i : enemyId_t) (enemies[i].type == SQUARE imply (E(i).Attacking or E(i).Left_Map) imply E(i).moveTimer &lt;= 42)</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-04-24 03:51:52 +0200">
			</result>
		</query>
		<query>
			<formula>A[] forall(i : enemyId_t) MAP[enemies[i].y][enemies[i].x] == 1 or isMainTower(enemies[i].x, enemies[i].y)</formula>
			<comment>Enemies are always either on a path or at the Main Tower</comment>
		</query>
	</queries>
</nta>
