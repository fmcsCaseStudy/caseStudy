<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>/*----------------------------------------------------------------------------------------------------*/
//Constants related to Map of the game
const int MAP_WIDTH = 16;
const int MAP_HEIGHT = 8;

//Map Definition
//    0 -&gt; Empty Cell  
//    1 -&gt; Path (red cells)
//    2 -&gt; Turret positions (green cells)
//    3 -&gt; Main Tower (blue cell)
const int MAP[MAP_HEIGHT][MAP_WIDTH] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2},
    {1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0},
    {1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1}
};


/*----------------------------------------------------------------------------------------------------*/
//Constants related to Main Tower
const int MAIN_TOWER_X = 15;
const int MAIN_TOWER_Y = 4;
const int MAIN_TOWER_LIFE = 10;


/*----------------------------------------------------------------------------------------------------*/
//Constants related to Enemy
typedef int[0,1] EnemyType; //0-&gt;Circle, 1-&gt;Square
const EnemyType CIRCLE = 0;
const EnemyType SQUARE = 1;

const int CIRCLE_SPEED = 1;
const int CIRCLE_HEALTH = 10;
const int CIRCLE_DAMAGE = 2;
const int SQUARE_SPEED = 3;
const int SQUARE_HEALTH = 20;
const int SQUARE_DAMAGE = 4;

const int CIRCLE_SPAWN_TIME = 2;
const int SQUARE_SPAWN_TIME = 3;

typedef struct {
    bool active;
    EnemyType type;
    int x;
    int y;
    int health;
    int spawnTime;  //Time when enemy spawned (for targeting priority)
} Enemy;


/*----------------------------------------------------------------------------------------------------*/
//Constants related to Turret
typedef int[0,2] TurretType; //0-&gt;Basic, 1-&gt;Cannon, 2-&gt;Sniper
const TurretType BASIC = 0;
const TurretType CANNON = 1;
const TurretType SNIPER = 2;

const int BASIC_RANGE = 2;
const int BASIC_FIRE_SPEED = 2;
const int BASIC_DAMAGE = 2;
const int CANNON_RANGE = 1;
const int CANNON_FIRE_SPEED = 7;
const int CANNON_DAMAGE = 5;
const int SNIPER_RANGE = 4;
const int SNIPER_FIRE_SPEED = 20;
const int SNIPER_DAMAGE = 8;

typedef struct {
    bool placed;
    TurretType type;
    int x;
    int y;
    int targetEnemy; //Index of the enemy being targeted, -1 if none
} Turret;


/*----------------------------------------------------------------------------------------------------*/
//Game State Constants
const int SPAWN_X = 0;
const int SPAWN_Y = 0;

//Game State Variables
int mainTowerLife = MAIN_TOWER_LIFE;
bool gameOver = false;
bool gameWon = false;

//Enemy Wave Parameters (VANILLA VERSION)
const int NUM_CIRCLES = 3;
const int NUM_SQUARES = 3;
const int MAX_ENEMIES = NUM_CIRCLES + NUM_SQUARES;

Enemy enemies[MAX_ENEMIES];
Turret turrets[10]; // Max 10 turrets for simplicity, can be adjusted


/*----------------------------------------------------------------------------------------------------*/
//Helper Functions

//Calculate Manhattan distance between two points
int distance(int x1, int y1, int x2, int y2) {
    return abs(x1 - x2) + abs(y1 - y2);
}

//Check if an enemy is in a turret's range
bool inRange(int turretX, int turretY, int range, int enemyX, int enemyY) {
    return distance(turretX, turretY, enemyX, enemyY) &lt;= range;
}

//Find the best target for a turret
int findTarget(int turretIndex) {
    int tx = turrets[turretIndex].x;
    int ty = turrets[turretIndex].y;
    int range;
    int bestTarget = -1;
    int minDistance = MAP_WIDTH + MAP_HEIGHT; //Initialize with a large value
    int earliestSpawn = -1; //For enemies at same distance
    int i;
    
    //Get turret range based on type
    if (turrets[turretIndex].type == BASIC) range = BASIC_RANGE;
    else if (turrets[turretIndex].type == CANNON) range = CANNON_RANGE;
    else range = SNIPER_RANGE;
    
    //First priority: Squares in range
    for (i = 0; i &lt; MAX_ENEMIES; i++) {
        if (enemies[i].active &amp;&amp; enemies[i].health &gt; 0 &amp;&amp; enemies[i].type == SQUARE) {
            if (inRange(tx, ty, range, enemies[i].x, enemies[i].y)) {
                int d = distance(tx, ty, enemies[i].x, enemies[i].y);
                if (d &lt; minDistance || (d == minDistance &amp;&amp; enemies[i].spawnTime &gt; earliestSpawn)) {
                    minDistance = d;
                    earliestSpawn = enemies[i].spawnTime;
                    bestTarget = i;
                }
            }
        }
    }
    
    //If no Squares found, look for Circles
    if (bestTarget == -1) {
        minDistance = MAP_WIDTH + MAP_HEIGHT;
        earliestSpawn = -1;
        for (i = 0; i &lt; MAX_ENEMIES; i++) {
            if (enemies[i].active &amp;&amp; enemies[i].health &gt; 0 &amp;&amp; enemies[i].type == CIRCLE) {
                if (inRange(tx, ty, range, enemies[i].x, enemies[i].y)) {
                    int d = distance(tx, ty, enemies[i].x, enemies[i].y);
                    if (d &lt; minDistance || (d == minDistance &amp;&amp; enemies[i].spawnTime &gt; earliestSpawn)) {
                        minDistance = d;
                        earliestSpawn = enemies[i].spawnTime;
                        bestTarget = i;
                    }
                }
            }
        }
    }
    
    return bestTarget;
}


//Apply damage to an enemy
void applyDamage(int enemyIndex, int damage) {
    enemies[enemyIndex].health -= damage;
}

//Check if a cell is a valid move for an enemy
bool isValidMove(int x, int y) {
    if (x &lt; 0 || x &gt;= MAP_WIDTH || y &lt; 0 || y &gt;= MAP_HEIGHT) return false;
    return MAP[y][x] == 0 || MAP[y][x] == 2; // Path or Main Tower
}

//Check if a cell is the Main Tower
bool isMainTower(int x, int y) {
    return x == MAIN_TOWER_X &amp;&amp; y == MAIN_TOWER_Y;
}

//Place turret
bool placeTurret(TurretType type, int x, int y) {
    int i;

    //Check if position is valid for turret placement
    if (x &lt; 0 || x &gt;= MAP_WIDTH || y &lt; 0 || y &gt;= MAP_HEIGHT) return false;
    if (MAP[y][x] != 1) return false; // Not a turret position
    
    //Check if a turret already exists at the position
    for (i = 0; i &lt; 10; i++) {
        if (turrets[i].placed &amp;&amp; turrets[i].x == x &amp;&amp; turrets[i].y == y) {
            return false;
        }
    }
    
    //Find an empty slot for turret
    for (i = 0; i &lt; 10; i++) {
        if (!turrets[i].placed) {
            turrets[i].placed = true;
            turrets[i].type = type;
            turrets[i].x = x;
            turrets[i].y = y;
            turrets[i].targetEnemy = -1;
            return true;
        }
    }
    
    return false; //No slot available
}

</declaration>
	<template>
		<name x="5" y="5">MainTower</name>
		<declaration>// Local declarations for MainTower template
clock hitTimer;        //Track recovery time after getting hit
int damageReceived;    //Ttrack damage from enemies
bool isHit = false;    //Flag to track hit state

// Constants
const int RECOVERY_TIME = 5; //Time needed to recover after being hit</declaration>
		<location id="id0" x="-204" y="-34">
			<name x="-221" y="-68">Alive</name>
		</location>
		<location id="id1" x="-102" y="-34">
			<name x="-110" y="-68">Hit</name>
		</location>
		<location id="id2" x="0" y="-34">
			<name x="-8" y="-68">Dead</name>
		</location>
		<init ref="id0"/>
		<transition id="id3">
			<source ref="id1"/>
			<target ref="id0"/>
			<nail x="-153" y="0"/>
		</transition>
		<transition id="id4">
			<source ref="id1"/>
			<target ref="id2"/>
		</transition>
		<transition id="id5">
			<source ref="id0"/>
			<target ref="id1"/>
		</transition>
	</template>
	<template>
		<name>GameController</name>
		<location id="id6" x="-544" y="0">
			<name x="-561" y="17">Start</name>
		</location>
		<location id="id7" x="-136" y="-68">
			<name x="-146" y="-102">Win</name>
		</location>
		<location id="id8" x="-136" y="68">
			<name x="-153" y="85">Lost</name>
		</location>
		<location id="id9" x="-272" y="0">
			<name x="-238" y="-8">Spawn_Enemies</name>
		</location>
		<location id="id10" x="-408" y="0">
			<name x="-450" y="-34">Place_Turret</name>
		</location>
		<init ref="id6"/>
		<transition id="id11">
			<source ref="id10"/>
			<target ref="id9"/>
		</transition>
		<transition id="id12">
			<source ref="id6"/>
			<target ref="id10"/>
		</transition>
		<transition id="id13">
			<source ref="id9"/>
			<target ref="id8"/>
		</transition>
		<transition id="id14">
			<source ref="id9"/>
			<target ref="id7"/>
		</transition>
	</template>
	<template>
		<name>Turret</name>
		<location id="id15" x="-340" y="0">
			<name x="-374" y="-34">Not_Placed</name>
		</location>
		<location id="id16" x="-204" y="0">
			<name x="-221" y="-34">Idle</name>
		</location>
		<location id="id17" x="-68" y="0">
			<name x="-93" y="-34">Firing</name>
		</location>
		<location id="id18" x="-136" y="68">
			<name x="-161" y="85">Reload</name>
		</location>
		<init ref="id15"/>
		<transition id="id19">
			<source ref="id15"/>
			<target ref="id16"/>
		</transition>
		<transition id="id20">
			<source ref="id18"/>
			<target ref="id16"/>
		</transition>
		<transition id="id21">
			<source ref="id18"/>
			<target ref="id17"/>
			<nail x="-68" y="68"/>
		</transition>
		<transition id="id22">
			<source ref="id17"/>
			<target ref="id18"/>
		</transition>
		<transition id="id23">
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="comments" x="-221" y="-59">Committed + Check Range</label>
		</transition>
	</template>
	<template>
		<name>Enemy</name>
		<location id="id24" x="-340" y="0">
			<name x="-382" y="-34">Not_Spawned</name>
		</location>
		<location id="id25" x="-204" y="0">
			<name x="-255" y="-34">Waiting</name>
		</location>
		<location id="id26" x="-68" y="0">
			<name x="-59" y="-25">Moving</name>
		</location>
		<location id="id27" x="68" y="0">
			<name x="34" y="8">Attacking</name>
		</location>
		<location id="id28" x="-136" y="-102">
			<name x="-146" y="-136">Dead</name>
		</location>
		<location id="id29" x="170" y="0">
			<name x="136" y="-34">Left_Map</name>
		</location>
		<location id="id30" x="-136" y="102">
			<name x="-144" y="119">Hit</name>
		</location>
		<init ref="id24"/>
		<transition id="id31">
			<source ref="id25"/>
			<target ref="id28"/>
		</transition>
		<transition id="id32">
			<source ref="id30"/>
			<target ref="id26"/>
			<nail x="-68" y="102"/>
		</transition>
		<transition id="id33">
			<source ref="id26"/>
			<target ref="id30"/>
		</transition>
		<transition id="id34">
			<source ref="id30"/>
			<target ref="id25"/>
			<nail x="-204" y="102"/>
		</transition>
		<transition id="id35">
			<source ref="id25"/>
			<target ref="id30"/>
		</transition>
		<transition id="id36">
			<source ref="id26"/>
			<target ref="id28"/>
		</transition>
		<transition id="id37">
			<source ref="id27"/>
			<target ref="id29"/>
		</transition>
		<transition id="id38">
			<source ref="id26"/>
			<target ref="id25"/>
			<nail x="-136" y="34"/>
		</transition>
		<transition id="id39">
			<source ref="id26"/>
			<target ref="id27"/>
		</transition>
		<transition id="id40">
			<source ref="id25"/>
			<target ref="id26"/>
		</transition>
		<transition id="id41">
			<source ref="id24"/>
			<target ref="id25"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
Process = Template();
// List one or more processes to be composed into a system.
system Process;
</system>
	<queries>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
